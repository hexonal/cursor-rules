---
description: 
globs: 
alwaysApply: true
---
# Java项目架构与结构规范

本规范旨在统一Java项目的架构设计、模块划分、代码结构、分支管理和版本控制等方面，以提高项目的可维护性、可扩展性和团队协作效率。项目的结构设计旨在支持清晰的关注点分离，并为实施领域驱动设计（DDD）提供基础。

## 一、基础框架要求

### 【智能】技术栈版本管理
1. **动态版本适配策略**：
   - **LTS优先**：优先选择长期支持版本，平衡稳定性与创新性
   - **安全驱动**：基于安全漏洞评估自动推荐版本升级
   - **兼容性评估**：智能分析版本升级对项目的影响
   - **渐进式升级**：支持分阶段、低风险的版本升级路径

2. **核心技术栈版本基线**：
   - **Java**：支持 1.8/11/17 LTS版本，推荐策略化选择
   - **Spring Boot**：2.x系列（兼容性优先）/ 3.x系列（创新性优先）
   - **数据库**：MySQL 5.7+/8.0+，PostgreSQL等多数据库支持
   - **消息中间件**：RocketMQ/Kafka等，根据场景智能推荐
   - **微服务框架**：Dubbo/Spring Cloud，支持多栈并存
   - **配置管理**：Apollo/Nacos/Spring Config，灵活选择

3. **智能升级建议**：
   - **自动扫描**：定期扫描依赖版本状态和安全风险
   - **影响评估**：评估版本升级对现有代码的影响范围
   - **升级路径**：提供详细的升级步骤和回滚预案

### 【智能】项目特性适配
1. **架构模式智能推荐**：
   - **单体应用**：自动检测并优化单模块项目结构
   - **多模块项目**：智能规划模块划分和依赖关系
   - **微服务架构**：支持服务拆分和治理最佳实践

2. **技术选型自适应**：
   - **数据访问层**：MyBatis-Plus（推荐）/ JPA / 原生MyBatis，根据项目特点选择
   - **日志框架**：Log4j2（推荐）/ Logback，支持无缝切换
   - **配置管理**：Apollo（推荐）/ Nacos / Spring Config，智能检测并适配
   - **启动框架**：Spring Boot Starter，自动优化依赖配置

3. **项目特性智能检测**：
   - **自动分析**：扫描现有项目特性，推荐最佳技术栈组合
   - **渐进式优化**：支持现有项目的逐步技术栈升级
   - **兼容性保证**：确保技术选型变更不影响业务连续性

## 二、项目结构规范

### 【智能】模块划分策略

项目应采用智能化的多模块Maven结构，能够根据项目特点自动适配最佳的模块划分方案。支持多种架构模式，包括传统分层、DDD、微服务等：

1. **`xxx-api` 模块**：定义对外提供的服务契约，主要是RPC接口及其相关的请求/响应对象（DTOs）和枚举。
   - 包含RPC服务接口 (例如 `UserRpcService`)
   - 包含RPC请求对象 (`XxxRpcReq`) 和响应对象 (`XxxRpcResp`)
   - 包含RPC层面的枚举定义 (如果这些枚举是API契约的一部分)
   - **此模块应尽量轻薄，不包含业务逻辑实现。**

2. **`xxx-api-impl` 模块**：RPC接口的实现层。在DDD语境下，此模块通常扮演应用服务（Application Service）的角色，负责编排领域逻辑，处理RPC请求。
   - 包含RPC服务接口的实现类 (例如 `UserRpcServiceImpl`)
   - 负责将RPC请求DTO转换为内部应用层或领域层所需的DTO/命令对象。
   - 调用 `biz` 模块中的应用服务或领域服务来执行核心业务。
   - 处理RPC层面的事务、安全、日志等横切关注点。
   - **不应包含核心领域规则，核心领域规则在 `biz` (或 `domain`) 模块中。**

3. **`xxx-biz` 模块**：核心业务逻辑层。此模块是DDD中领域模型（Domain Model）和应用服务（Application Services）的主要所在地。
   - **应用服务 (Application Services)**: 例如 `OrderAppService`，`UserAppService`。它们编排领域对象（实体、值对象、领域服务）来完成具体的业务用例。它们是 `api-impl` 或 `web` 模块的直接调用目标。
   - **领域模型 (Domain Model)**: 
     - **领域实体 (Entities)**: 例如 `Order`, `Product`。包含业务状态和行为（充血模型）。
     - **值对象 (Value Objects)**: 例如 `Address`, `Money`。
     - **领域服务 (Domain Services)**: 例如 `OrderPricingDomainService`。封装不属于任何特定实体的领域逻辑。
     - **仓库接口 (Repository Interfaces)**: 例如 `OrderRepository`。定义领域对象的持久化契约。
     - **领域事件 (Domain Events)**: 例如 `OrderPaidEvent`。
   - 业务相关的DTOs (Data Transfer Objects，用于应用服务内部或与领域层交互)。
   - 定时任务 (`job`)、消息处理 (`ons.consumer`, `ons.producer`) 等业务相关组件。

4. **`xxx-dao` 模块 (或 `xxx-infrastructure` 模块)**：数据访问层和基础设施实现。**此模块是DDD中的基础设施层（Infrastructure Layer）。**
   - **数据持久化对象 (DO - Data Objects)**: 例如 `UserDO`, `OrderDO`。与数据库表结构一一对应。
   - **MyBatis Mapper接口和XML映射文件**。
   - **仓库实现 (Repository Implementations)**: 例如 `OrderRepositoryImpl`。实现定义在 `biz` (或 `domain`) 模块中的仓库接口，负责DO与领域实体之间的转换和实际的数据库操作。
   - 基础设施相关的其他实现，如消息队列的生产者/消费者具体实现（如果不想放在biz），缓存服务的具体实现等。

5. **`xxx-web` 模块**：处理HTTP请求的Web层，对外暴露HTTP API。
   - 包含Controller类，处理HTTP请求，调用 `biz` 模块中的应用服务。
   - 包含Web层请求对象 (`XxxReq`) 和响应对象 (`XxxResp`)，以及必要的DTO转换。
   - 包含Spring MVC拦截器 (`interceptor`)、Web相关配置 (`config`)。

6. **`xxx-common` 模块**：项目内通用的组件和工具类。
   - 通用工具类 (`utils`)。
   - 应用范围的常量定义 (`constants`)。
   - 应用范围的、非领域特定的枚举定义 (`enums`)。
   - 通用异常基类 (`exception`) (智能适配现有通用组件库或自建)。
   - 通用配置类 (如果适用)。

7. **`xxx-integration` 模块**：用于集成外部第三方服务或系统。
   - 包含调用外部HTTP API、RPC服务或其他第三方SDK的客户端代码。
   - 在DDD中，这部分常作为防腐层（Anti-Corruption Layer, ACL）的一部分，将外部模型的变动与核心领域隔离开。
   - 接口通常定义在 `biz` (应用层或领域层)，实现放在此模块。

*(【项目适配】对于大型复杂项目，智能推荐将核心领域模型 (`Entities`, `Value Objects`, `Domain Service interfaces`, `Repository interfaces`, `Domain Events`) 提取到独立的 `xxx-domain` 模块，使其不依赖任何基础设施或应用层代码。系统会根据项目复杂度自动评估是否需要此种模块拆分。)*

### 【智能】包结构规范
1. **自适应包名策略**：
   - **智能检测**：自动识别项目现有的包名结构，如 `com.{company}.{project}` 
   - **动态适配**：根据 Maven `groupId` 自动推断项目包名前缀
   - **兼容多种格式**：支持 `com.company.project`、`com.company.product.module` 等多层次结构
   - **历史兼容**：保持对现有项目包名的向后兼容

2. **包结构模式自学习**：根据项目实际情况智能匹配最适合的包结构模式
   ```
   {company}.{project}.api          // API定义 (RPC)
     ├── rpc.{module}.service     // RPC服务接口
     ├── rpc.{module}.request     // RPC请求对象
     ├── rpc.{module}.response    // RPC响应对象
     └── rpc.{module}.enums       // RPC API相关的枚举
   
   {company}.{project}.api.impl     // API实现 (RPC)
     └── rpc.{module}.service.impl // RPC服务实现
   
   {company}.{project}.biz          // 业务逻辑核心
     ├── app.{module}.service      // 应用服务接口
     ├── app.{module}.service.impl // 应用服务实现
     ├── app.{module}.dto          // 应用服务使用的数据传输对象
     ├── domain.{module}.model     // 领域模型: Entities, Value Objects, Domain Events
     ├── domain.{module}.service   // 领域服务接口与实现
     ├── domain.{module}.repository// 仓库接口
     ├── job.{module}             // 定时任务
     ├── mq.{module}.consumer     // 消息消费者
     ├── mq.{module}.producer     // 消息生产者
     └── // ... 其他业务组件
   
   {company}.{project}.dao          // 数据访问与基础设施
     ├── persistent.{module}.po    // 持久化对象 (DO/PO)
     ├── persistent.{module}.mapper// MyBatis Mapper接口
     ├── repository.{module}.impl  // 仓库实现
     └── // ... 其他基础设施实现

   // 可选的独立领域模块
   // {company}.{project}.domain       // 纯领域模型模块
   //   └── {module}.model
   //   └── {module}.service (接口)
   //   └── {module}.repository (接口)
   //   └── {module}.event

   {company}.{project}.integration  // 外部集成
     ├── acl.{module}.{external}.adapter // 防腐层适配器
     ├── acl.{module}.{external}.dto     // 外部系统DTO
     └── client.{module}.{external}      // 外部服务客户端
   
   {company}.{project}.common       // 项目级公共组件
     ├── constants          
     ├── enums             // 非领域相关的通用枚举
     ├── util              // 通用工具类
     └── exception         // 项目级通用异常
   
   {company}.{project}.web          // Web层 (HTTP API)
     ├── rest.{module}.controller  // REST Controller
     ├── rest.{module}.request     // Web请求对象
     ├── rest.{module}.response    // Web响应对象
     ├── interceptor       
     └── config            
   
   // 启动类 Application.java 通常放在顶层基础包下
   ```
   
   **智能变量说明**：
   - `{company}`：自动从Maven groupId或现有包结构中推断公司标识
   - `{project}`：自动从Maven artifactId或现有包结构中推断项目标识  
   - `{module}`：自动识别或建议业务模块名称
   - `{external}`：外部系统标识，支持动态配置

### 【强制】资源文件规范
1. 配置文件位置：
   ```
   resources/
     ├── application.yml        // 主配置文件
     ├── application-dev.yml    // 开发环境配置
     ├── application-test.yml   // 测试环境配置
     ├── application-prod.yml   // 生产环境配置
     └── logback-spring.xml    // 日志配置
   ```
2. MyBatis映射文件位置：
   ```
   resources/
     └── mapper/
         └── 业务模块名/
             └── XxxMapper.xml
   ```

## 三、分支管理与版本控制规范

### 【强制】分支命名规范
1. 主分支：master
2. 开发分支：develop
3. 功能分支：feature/模块名/功能描述
4. 修复分支：hotfix/问题描述
5. 发布分支：release/版本号

### 【强制】分支策略
1. master分支：
   - 生产环境代码
   - 只能从release分支合并
   - 每次合并必须打tag
2. develop分支：
   - 开发环境代码
   - 功能开发的基础分支
   - 只能从feature分支合并
3. feature分支：
   - 从develop分支创建
   - 完成后合并回develop
   - 命名规范：feature/模块名/功能描述
4. hotfix分支：
   - 从master分支创建
   - 完成后同时合并到master和develop
   - 命名规范：hotfix/问题描述
5. release分支：
   - 从develop分支创建
   - 完成后合并到master和develop
   - 命名规范：release/版本号

### 【强制】版本号格式
1. 格式：主版本号.次版本号.修订号
2. 主版本号：不兼容的API修改
3. 次版本号：向下兼容的功能性新增
4. 修订号：向下兼容的问题修正

### 【强制】版本发布流程
1. 准备阶段：
   - 创建release分支
   - 更新版本号
   - 更新CHANGELOG
2. 测试阶段：
   - 完整回归测试
   - 修复发现的问题
   - 更新文档 (包括API文档、用户手册、CHANGELOG等)
3. 发布阶段：
   - 合并到master
   - 打tag
   - 部署生产环境
4. 完成阶段：
   - 合并到develop
   - 删除release分支
   - 发布公告

### 【强制】Tag管理
1. 命名规范：
   - v主版本号.次版本号.修订号
   - 示例：v1.2.3
2. 标记要求：
   - 必须有描述信息
   - 必须关联提交ID
   - 必须有发布说明
3. 管理要求：
   - 禁止删除已发布tag
   - 禁止修改已发布tag
   - 及时同步到远程仓库

### 【智能】依赖管理规范
1. **智能版本管理**
   - **自动版本检测**：检测并建议最新稳定版本，关注安全漏洞修复
   - **兼容性分析**：自动分析版本升级的兼容性影响
   - **统一版本策略**：在父POM中智能管理版本，避免版本冲突
   - **增量更新建议**：基于项目使用情况智能推荐版本更新策略

2. **智能依赖优化**
   - **依赖冲突自动检测**：自动识别并提供解决方案
   - **循环依赖预警**：智能检测潜在的循环依赖风险
   - **无用依赖清理**：定期扫描并建议清理未使用的依赖
   - **依赖树优化**：自动分析并优化依赖结构

3. **项目适配**
   - **根据项目特性自动调整**：基于项目类型（Web、微服务、批处理等）智能推荐依赖配置
   - **技术栈一致性检查**：确保项目依赖与团队技术栈标准保持一致