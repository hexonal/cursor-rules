---
description: 
globs: 
alwaysApply: false
---
# Go 包设计与项目结构 (v1.0)

本规则涵盖了 Go 项目中包的设计原则、依赖管理以及推荐的项目结构，旨在实现高内聚、低耦合和清晰的模块划分。

## 包设计与依赖管理

*   **高内聚**: 包内的代码应该专注于单一的职责或领域。相关的功能和类型应放在同一个包中。
    *   **AI 指导**: 分析函数或类型的移动/创建请求时，评估其是否符合目标包的职责。
*   **低耦合**: 包之间应尽量减少依赖。避免循环依赖。
    *   **接口**: 使用接口 (`interface{}`) 来解耦具体实现。依赖方应依赖接口，而不是具体类型。
    *   **AI 指导**: 在添加导入语句时，检查是否引入了不必要的依赖或可能导致循环依赖。建议使用接口进行解耦。
*   **入口点**: `main` 包应尽可能小，主要负责初始化和启动应用程序，将业务逻辑委托给其他包。
    *   **建议**: 将业务逻辑、HTTP 处理、数据库交互等分别放到独立的包中。例如： `cmd/server/main.go`, `internal/handler`, `internal/service`, `internal/repository`。
    *   **AI 指导**: 如果 `main.go` 文件过于庞大，建议用户进行重构，将逻辑拆分到 `internal` 或其他合适的包中。

## 项目结构 (Project Layout)

推荐遵循一个清晰、可扩展的项目结构。虽然没有唯一的官方标准，但以下结构被广泛采用并推荐使用：

*   **`/cmd`**: 存放应用程序的入口点 (main 包)。
    *   例如: `[cmd/my-server/main.go](mdc:cmd/my-server/main.go)`
    *   **AI 指导**: 创建新的可执行应用时，建议在此目录下创建子目录。
*   **`/internal`**: 存放项目私有的应用和库代码。这是推荐放置大部分业务逻辑的地方。
    *   **`/internal/app`**: 核心应用逻辑、领域服务等。
    *   **`/internal/handler`** (或 `controller`): HTTP/RPC 请求处理器。 `[internal/handler](mdc:internal/handler)`
    *   **`/internal/repository`** (或 `dao`, `store`): 数据访问逻辑，封装数据库交互。 `[internal/repository](mdc:internal/repository)`
    *   **`/internal/service`**: 协调业务流程，通常调用 repository。 `[internal/service](mdc:internal/service)`
    *   **`/internal/models`** (或 `domain`): 数据结构、数据库模型或领域对象。 `[internal/models](mdc:internal/models)`
    *   **`/internal/middleware`**: (可选) 存放 HTTP 中间件。 `[internal/middleware](mdc:internal/middleware)`
    *   **AI 指导**: 创建业务逻辑、数据访问、模型或中间件时，建议放在 `internal` 下相应的子目录中。
*   **`/pkg`**: 存放可以被外部应用安全导入的库代码（如果你的项目旨在作为库发布）。如果项目仅为内部使用，优先将代码放在 `/internal`。
*   **`/api`**: 存放 API 定义文件（如 OpenAPI/Swagger, gRPC .proto）。 `[api](mdc:api)`
*   **`/configs`**: 存放配置文件模板或默认配置。 `[configs](mdc:configs)`
*   **`/scripts`**: 存放辅助脚本（构建、部署、分析等）。 `[scripts](mdc:scripts)`

**原则**:
*   `main` 包保持简洁，负责组装和启动。
*   `internal` 目录强制实现项目内部代码的私有性。
*   按职责划分包 (handler, service, repository, models)。
