---
description: 
globs: 
alwaysApply: true
---
# PHP项目迁移至Java项目规范指南

## 1. 引言与目标

本规范旨在为PHP项目向Java技术栈迁移提供一套标准化的流程、开发约定和最佳实践。目标是确保迁移过程高效、平稳，保障新Java项目的代码质量、可维护性、可扩展性，并与现有Java生态系统（后文简称"Java规范体系"）良好集成。

迁移不仅是代码语言的转换，更是技术架构、编程范式和生态系统的转变。本规范将覆盖从项目评估、规划到开发、测试、部署的全过程，并强调在各环节遵循Java规范体系的重要性。

## 2. 迁移前评估与规划

### 2.1. 【强制】PHP项目全面梳理
1.  **功能模块识别**：详细列出PHP项目的所有功能模块及其业务逻辑。
2.  **代码复杂度评估**：分析各模块代码量、复杂度、第三方库依赖情况。
3.  **数据结构分析**：梳理PHP项目中使用的主要数据结构（如复杂数组、对象）及其用途。**【DDD增强】**此分析应致力于识别这些数据结构背后所代表的潜在领域概念，为后续在Java中定义实体（Entities）和值对象（Value Objects）打下基础。
4.  **数据库依赖**：记录所有数据库表结构、存储过程、触发器。评估其是否符合 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc) 中的表设计规范，并规划调整。
5.  **外部接口依赖**：列出所有外部HTTP API、RPC调用、消息队列等依赖。评估Java端的接入方式，并考虑是否符合 [java-http-api.mdc](mdc:.cursor/rules/java-http-api.mdc) 或 [java-rpc-service.mdc](mdc:.cursor/rules/java-rpc-service.mdc) 的设计原则。
6.  **配置文件与环境变量**：整理PHP项目的所有配置文件和环境变量，为迁移至Apollo做准备，遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中关于资源文件和配置管理的规范 (以及 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中关于配置加载的指导)。

### 2.2. 【强制】技术选型与映射
1.  **Java技术栈对齐**：迁移后的项目必须遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中定义的"基础框架要求"（如Spring Boot版本、JDK版本等）。
2.  **PHP框架特性映射**：
    *   若PHP使用特定框架（如Laravel, Symfony, ThinkPHP等），分析其核心特性（路由、ORM、依赖注入、中间件、模板引擎）如何在Spring Boot中找到对应或更优实现，并确保实现方式符合Java规范体系。
    *   例如：Laravel的Eloquent ORM迁移至MyBatis-Plus时，DAO层和XML的编写需遵循 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc)。
3.  **PHP库与Java库映射**：为PHP项目中使用的核心Composer包寻找功能对等或更优的Java库（Maven依赖）。选择时应考虑库的稳定性、社区活跃度以及与Java规范体系的兼容性。

### 2.3. 【推荐】迁移策略选择
1.  **一次性迁移 (Big Bang)**：适用于小型、业务逻辑相对简单的项目。风险较高，但迁移周期可能较短。
2.  **逐步迁移 (Strangler Fig Pattern)**：对于大型复杂应用，推荐采用绞杀者模式。逐步将PHP功能模块替换为新的Java服务，通过API网关或反向代理进行路由。新Java服务的设计需从一开始就遵循所有相关的Java规范。
3.  **模块化迁移**：按业务模块逐个迁移，每个模块可以独立上线。

### 2.4. 【强制】数据迁移方案
1.  **数据模型转换**：设计Java对应的数据库表结构时，严格遵循 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc) 中的表结构规范（如基础字段、索引命名、字段设计）。
2.  **数据清洗与校验**：确保迁移数据的准确性和完整性。
3.  **迁移工具/脚本**：选择或开发合适的数据迁移工具。
4.  **迁移过程验证**：制定数据迁移后的验证方案。

### 2.5. 【强制】风险评估与资源计划
1.  识别迁移过程中可能的技术风险（如特定PHP功能难以映射）、业务风险、时间风险。
2.  制定详细的迁移时间表、人力资源分配。

## 3. 开发环境与基础设置

### 3.1. 【强制】Java开发环境统一
*   遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中定义的技术栈版本和工具要求。
*   IDE：IntelliJ IDEA。
*   构建工具：Maven (遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中对依赖管理的要求)。

### 3.2. 【强制】版本控制
*   Git：所有迁移代码纳入Git管理。
*   分支策略：严格遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中定义的"分支管理规范"和"版本控制规范"。

### 3.3. 【强制】项目结构
*   采用 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中定义的标准多模块Maven项目结构 (api, biz, dao, web等) 和包结构规范。

## 4. 代码层面迁移规范

### 4.1. 【核心原则】非逐行翻译，理解业务后以Java思维和规范重写
*   避免简单地将PHP代码逻辑生硬地翻译成Java代码。应先充分理解原有PHP代码的业务意图，然后结合Java的特性、设计模式，并严格遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 进行重新设计和实现。

### 4.2. 【强制】命名规范
*   严格遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中定义的Java命名规范 (包名、类名、方法名、变量名、常量名等)。
*   例如，PHP中常见的下划线命名 (`$user_name`, `get_user_info()`) 必须转换为Java的驼峰命名 (`userName`, `getUserInfo()`)。

### 4.3. 【强制】数据类型映射
1.  **标量类型**：
    *   PHP `integer` -> Java `int` / `Integer` / `long` / `Long` (依据 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc) 字段设计规范选择，并考虑是否允许null)。
    *   PHP `float`/`double` -> Java `double` / `Double` / `BigDecimal` (金额等精确计算严格按 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc) 要求使用 `BigDecimal`)。
    *   PHP `boolean` -> Java `boolean` / `Boolean`.
    *   PHP `string` -> Java `String`.
2.  **数组 (Array)**：
    *   PHP索引数组 -> Java `List` (如 `ArrayList`)。
    *   PHP关联数组 -> Java `Map` (如 `HashMap`) 或优先定义结构清晰的DTO类 (遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中关于DTO的命名和设计)。
    *   PHP多维数组 -> Java嵌套 `List`/`Map` 或更复杂的DTO结构。
3.  **Null处理**：
    *   Java中需要显式处理 `null`。推荐使用 `Optional` 作为可能不返回结果的方法的返回类型 (例如 `repository.findById(id)` 返回 `Optional<User>`)。对于DTO/实体字段，使用可空类型并通过JSR303注解（如 `@NotNull`）或业务逻辑校验其存在性。避免在方法参数中直接使用 `Optional`，除非有非常明确的理由。

### 4.4. 【强制】控制结构转换
*   基本控制结构转换外，应注意PHP的松散比较 `==` 和严格比较 `===` 的差异。Java中对象比较应使用 `.equals()` (并注意实现 `hashCode()` 的一致性)，具体实践参考 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc)。

### 4.5. 【强制】函数与类库迁移
1.  **PHP内置函数**：寻找Java标准库（尤其是Java 8+的Streams API、`java.time`包等）、Spring框架或公司推荐的第三方库（如Apache Commons Lang/Collections, Guava）中的对应实现。
2.  **全局变量与常量**：PHP全局状态的使用方式在Java中应避免。常量定义遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc)。
3.  **Composer依赖**：分析 `composer.json`，为每个PHP库寻找功能匹配的Maven依赖。新增依赖需符合 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中的依赖管理原则。

### 4.6. 【强制】面向对象迁移
*   PHP的类、接口、trait等面向对象特性迁移到Java时，需遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中关于类设计、接口设计、依赖注入（构造器注入优先）、DDD充血模型等规范。**【DDD增强】**迁移的重点不仅是语法转换，更是识别和构建表达业务的领域实体和值对象，并将相关行为内聚到实体中。
*   PHP魔术方法在Java中通常没有直接对应，应寻求更符合Java习惯和设计模式的实现方式，如使用AOP切面（谨慎评估），或通过更明确的方法设计来替代。

### 4.7. 【强制】错误与异常处理
*   严格遵循 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 中的错误码规范、异常分类、处理原则和统一响应格式。
*   PHP的错误和异常处理方式必须转换为Java的异常体系，并使用统一定义的业务异常和系统异常。
*   Java服务的安全实现需遵循 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 中的安全规范，包括输入验证、数据加密、访问控制、日志安全等。
*   密码存储：若PHP使用MD5或SHA1等过时哈希算法，迁移时必须升级到BCrypt等现代强哈希算法（推荐使用Spring Security提供的 `PasswordEncoder` 实现），并加盐处理。

### 4.8. 【强制】HTTP请求处理 (Web应用迁移)
1.  **API设计**：新创建或迁移的HTTP接口，其URL格式、请求方法、参数规范、响应结构、文档规范等，均需严格遵守 [java-http-api.mdc](mdc:.cursor/rules/java-http-api.mdc)。
2.  **请求处理**：使用Spring MVC的注解处理请求，参数校验遵循 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 中的参数校验规范。

### 4.9. 【强制】数据库交互迁移
1.  严格遵循 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc) 中的所有规范，包括Mapper接口规范、XML文件规范、SQL开发规范和性能优化规范。
2.  PHP中动态构建SQL的方式在Java中极易引发安全问题，必须改为使用MyBatis的 `#{}` 预编译参数传递方式。

### 4.10. 【强制】安全性考量
1.  迁移过程中，必须识别并修复原PHP代码中可能存在的安全漏洞 (SQL注入, XSS, CSRF等)。
2.  Java服务的安全实现需遵循 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 中的安全规范，包括输入验证、数据加密、访问控制、日志安全等。
3.  密码存储：若PHP使用MD5或SHA1等过时哈希算法，迁移时必须升级到BCrypt等现代算法，并加盐处理。

## 5. 配置迁移

### 5.1. 【强制】配置文件与配置中心
*   所有配置项迁移至Apollo配置中心，并遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中关于资源文件和配置管理的规范 (以及 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中关于配置加载的指导)。

## 6. 测试规范

### 6.1. 【强制】单元测试与集成测试
*   严格遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中的单元测试规范和测试覆盖率要求。
*   编写必要的集成测试，验证模块间交互及与外部依赖的正确性。

### 6.2. 【推荐】迁移对比测试
*   对于关键接口和功能，设计测试用例，对比迁移前后PHP和Java系统的输出结果和行为，确保业务逻辑一致性。

## 7. 部署与运维

### 7.1. 【强制】部署与版本管理
*   迁移后的Java项目需纳入公司统一的CI/CD流程。
*   版本发布和Tag管理遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中的规范。

### 7.2. 【强制】日志与监控
*   日志系统接入、日志格式、级别、内容等严格遵循 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 中的日志规范和安全要求。
*   接入公司统一监控系统。

## 8. 核心最佳实践 (与Java规范体系深度融合)

1.  **【实践核心】全面拥抱Java规范体系**：
    *   将本次迁移视为一次按照Java高标准重构和新建项目的机会。迁移的最终产出物不仅是功能对等的Java代码，更应是完全符合 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc)、[java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc)、[java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc)、[java-http-api.mdc](mdc:.cursor/rules/java-http-api.mdc)、[java-rpc-service.mdc](mdc:.cursor/rules/java-rpc-service.mdc) 和 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 等所有相关规范的高质量Java服务。
    *   **行动指南**：在迁移设计的每个阶段，主动对照相关规范文档。例如，在设计数据库表时，打开 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc) 逐条核对；在编写业务逻辑时，参考 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中的方法设计原则和编码实践。

2.  **【实践核心】Java思维重塑，而非PHP逻辑平移**：
    *   深刻理解PHP的动态、弱类型特性与Java的静态、强类型、面向对象特性之间的根本差异。避免将PHP特有的实现方式（如庞大的关联数组用作通用数据结构、滥用全局变量、过程式代码风格）直接"翻译"到Java。
    *   **行动指南**：对于PHP中的复杂逻辑，首先提炼其核心业务需求，然后运用Java的设计模式（如策略模式、工厂模式、模板方法等）、面向对象原则（SOLID）、以及 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中推荐的编码风格进行全新实现。例如，PHP中的关联数组应优先转换为定义良好的Java DTO，并遵循相关的命名和注释规范。

3.  **【实践核心】架构先行，模块清晰**：
    *   迁移伊始，即严格按照 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 规划新Java项目的模块划分（api, biz, dao, web等）和包结构。确保职责分离，高内聚低耦合。
    *   **行动指南**：即使是迁移小型PHP应用，也应坚持标准的多模块结构，这有利于后续的扩展、维护和团队协作，并确保与公司其他Java项目结构一致。

4.  **【实践核心】接口驱动，标准统一**：
    *   若迁移涉及对外提供服务或内部模块间调用，新创建的HTTP API或RPC服务必须从设计阶段就严格遵守 [java-http-api.mdc](mdc:.cursor/rules/java-http-api.mdc) 和 [java-rpc-service.mdc](mdc:.cursor/rules/java-rpc-service.mdc)。
    *   **行动指南**：包括URL命名、请求/响应体结构、版本控制、错误码和统一响应格式（参考 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc)）。确保新服务能够无缝、规范地融入现有微服务体系。

5.  **【实践核心】质量内建，测试左移**：
    *   严格执行 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中的单元测试要求（如覆盖率）和测试规范。在迁移过程中，为每个转换和重写的Java模块编写高质量的单元测试和必要的集成测试。
    *   **行动指南**：将测试作为迁移的一部分，而非事后检查。考虑引入迁移对比测试框架，自动化验证迁移前后业务逻辑的一致性。

6.  **【实践核心】安全筑基，全程防护**：
    *   在迁移的每个环节，主动识别并改进原PHP项目中可能存在的安全隐患。新Java代码的实现必须严格遵循 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 中的各项安全规范（如输入验证、SQL防注入、XSS/CSRF防护、敏感数据加密存储、权限控制、安全日志等）。
    *   **行动指南**：例如，数据库交互严格使用MyBatis的 `#{}` 参数绑定；用户密码迁移时，若原加密方式不安全，则必须升级至BCrypt等强哈希算法并加盐。
    *   **并发模型差异**：注意PHP（通常是无状态多进程）与Java（通常是多线程共享内存）并发模型的不同，在Java中需特别关注线程安全问题，合理使用并发工具和同步机制。
    *   **内存管理差异**：Java应用是长时间运行的进程，需警惕内存泄漏，不当的静态变量使用、资源未关闭（如IO流、数据库连接）等问题。利用 `try-with-resources` 和Spring的资源管理。
    *   **事务处理**：确保在Java中正确地管理事务边界，特别是涉及数据库操作的业务逻辑，遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中关于事务处理的规范 (声明式或编程式)。
    *   **Session管理**：PHP的会话管理与Java EE (Spring Session) 不同。如需会话保持，应迁移至Spring Session并结合Redis或JDBC等进行分布式会话管理。
    *   **日期与时间处理**：PHP的日期时间函数应全部迁移至Java 8的 `java.time` (JSR-310) API，避免使用旧的 `java.util.Date` 和 `Calendar`。

7.  **【实践核心】迭代演进，持续集成与反馈**：
    *   对于中大型PHP项目，强烈推荐采用逐步迁移、模块化迁移的策略。每个迁移的迭代成果都应遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 中的分支管理、提交规范和版本发布流程，并纳入CI/CD流水线。
    *   **行动指南**：建立快速反馈机制，包括代码审查（确保符合所有Java规范）、自动化测试、以及小范围上线验证。定期回顾迁移过程，总结经验教训。

8.  **陷阱警示**：
    *   **并发模型差异**：注意PHP（通常是无状态多进程）与Java（通常是多线程共享内存）并发模型的不同，在Java中需特别关注线程安全问题。
    *   **内存管理差异**：Java应用是长时间运行的进程，需警惕内存泄漏，不当的静态变量使用、资源未关闭等问题。
    *   **事务处理**：确保在Java中正确地管理事务边界，特别是涉及数据库操作的业务逻辑，遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 中关于事务处理的规范。

## 9. 附录：PHP常用库/功能与Java建议方案 (示例)

| PHP 功能/库        | Java 建议方案/库 (需结合规范选择)              |
|--------------------|-------------------------------------------------------|
| Laravel/Symfony    | Spring Boot (遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 定义的基础框架和项目特性) |
| Eloquent ORM       | MyBatis-Plus (遵循 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc))     |
| Twig/Blade         | Thymeleaf (若需服务端渲染，前后端分离项目则不需要)      |
| Composer           | Maven (遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 依赖管理) |
| GuzzleHttp         | OkHttp, Apache HttpClient, Spring RestTemplate/WebClient (遵循 [java-http-api.mdc](mdc:.cursor/rules/java-http-api.mdc) 调用方式，推荐使用 Spring WebClient 进行响应式调用) |
| Monolog            | SLF4J + Logback/Log4j2 (遵循 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 日志规范) |
| PHPUnit            | JUnit 5, Mockito, AssertJ (遵循 [java-code-development-and-quality.mdc](mdc:.cursor/rules/java-code-development-and-quality.mdc) 测试规范) |
| Redis (phpredis)   | Jedis (或Spring Data Redis，遵循公司内部Redis客户端规范)                     |
| Cron + Scripts     | XXL-JOB (遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 技术栈) |
| Basic Queues (e.g., Beanstalkd, file-based) | RocketMQ (遵循 [java-project-architecture-and-structure.mdc](mdc:.cursor/rules/java-project-architecture-and-structure.mdc) 技术栈) |
| ...                | ...                                                   |

---
*本规范将根据实际迁移项目的经验持续更新。*