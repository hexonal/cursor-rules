---
description: 
globs: 
alwaysApply: false
---
# 小程序测试与质量保证规则

## 🧪 测试策略

### 单元测试规范
```javascript
// 使用Jest进行小程序组件测试
describe('MessageInput Component', () => {
  let component;
  
  beforeEach(() => {
    component = {
      data: {
        messageList: [],
        inputValue: '',
        isRecording: false,
      },
      setData: jest.fn(),
      triggerEvent: jest.fn(),
    };
  });

  describe('消息发送功能', () => {
    test('应该能发送文本消息', () => {
      const mockMessage = '测试消息';
      component.data.inputValue = mockMessage;
      
      // 模拟发送消息方法
      const sendMessage = (content) => {
        if (!content.trim()) {
          throw new Error('消息内容不能为空');
        }
        return { success: true, messageId: '123' };
      };

      const result = sendMessage(component.data.inputValue);
      expect(result.success).toBe(true);
      expect(result.messageId).toBeDefined();
    });

    test('空消息应该抛出错误', () => {
      const sendMessage = (content) => {
        if (!content.trim()) {
          throw new Error('消息内容不能为空');
        }
        return { success: true };
      };

      expect(() => sendMessage('')).toThrow('消息内容不能为空');
      expect(() => sendMessage('   ')).toThrow('消息内容不能为空');
    });

    test('长消息应该被截断', () => {
      const MAX_LENGTH = 500;
      const longMessage = 'a'.repeat(600);
      
      const validateMessage = (content) => {
        return content.length > MAX_LENGTH 
          ? content.substring(0, MAX_LENGTH) 
          : content;
      };

      const result = validateMessage(longMessage);
      expect(result.length).toBe(MAX_LENGTH);
    });
  });

  describe('录音功能', () => {
    test('应该正确处理录音权限', async () => {
      const mockWx = {
        getSetting: jest.fn(),
        authorize: jest.fn(),
      };

      global.wx = mockWx;

      mockWx.getSetting.mockImplementation(({ success }) => {
        success({ authSetting: { 'scope.record': true } });
      });

      const checkRecordPermission = () => {
        return new Promise((resolve) => {
          wx.getSetting({
            success: (res) => {
              resolve(res.authSetting['scope.record'] !== false);
            },
          });
        });
      };

      const hasPermission = await checkRecordPermission();
      expect(hasPermission).toBe(true);
    });
  });
});
```

### 集成测试
```javascript
// 测试组件间交互
describe('Chat Integration', () => {
  test('消息发送到列表显示的完整流程', async () => {
    const mockConversation = {
      conversationID: 'test-conversation',
      type: 'C2C',
    };

    const messageInput = createComponent('MessageInput', {
      conversation: mockConversation,
    });

    const messageList = createComponent('MessageList', {
      conversation: mockConversation,
    });

    // 模拟发送消息
    await messageInput.sendTextMessage('测试消息');

    // 验证消息是否出现在列表中
    expect(messageList.data.messageList).toContainEqual(
      expect.objectContaining({
        content: '测试消息',
        conversationID: mockConversation.conversationID,
      })
    );
  });
});
```

## 🔍 代码质量检查

### ESLint配置
```javascript
// .eslintrc.js
module.exports = {
  env: {
    es6: true,
    node: true,
  },
  extends: [
    'eslint:recommended',
  ],
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
  },
  globals: {
    wx: 'readonly',
    getApp: 'readonly',
    Component: 'readonly',
    Page: 'readonly',
  },
  rules: {
    // 代码风格
    'indent': ['error', 2],
    'quotes': ['error', 'single'],
    'semi': ['error', 'always'],
    'comma-dangle': ['error', 'always-multiline'],
    
    // 最佳实践
    'no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    'no-console': ['warn'],
    'prefer-const': ['error'],
    'no-var': ['error'],
    
    // 小程序特定规则
    'no-undef': ['error', { typeof: false }],
  },
};
```

### 代码复杂度检查
```javascript
// 复杂度监控工具
const CodeComplexityChecker = {
  // 检查函数复杂度
  checkFunctionComplexity(functionNode) {
    let complexity = 1; // 基础复杂度
    
    // 遍历AST节点，计算圈复杂度
    const complexityNodes = [
      'IfStatement',
      'SwitchCase', 
      'WhileStatement',
      'ForStatement',
      'ConditionalExpression',
      'LogicalExpression',
    ];

    // 递归计算复杂度
    function traverse(node) {
      if (complexityNodes.includes(node.type)) {
        complexity++;
      }
      
      if (node.children) {
        node.children.forEach(traverse);
      }
    }

    traverse(functionNode);
    return complexity;
  },

  // 检查文件长度
  checkFileLength(filePath) {
    const fs = require('fs');
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n').length;
    
    if (lines > 500) {
      console.warn(`File ${filePath} is too long (${lines} lines). Consider splitting it.`);
    }
    
    return lines;
  },

  // 检查方法数量
  checkMethodCount(componentObject) {
    const methodCount = Object.keys(componentObject.methods || {}).length;
    
    if (methodCount > 20) {
      console.warn(`Component has too many methods (${methodCount}). Consider refactoring.`);
    }
    
    return methodCount;
  },
};
```

## 📊 性能监控

### 性能指标收集
```javascript
// 性能监控工具
const PerformanceMonitor = {
  // 监控setData调用
  monitorSetData() {
    const originalSetData = Component.prototype.setData;
    
    Component.prototype.setData = function(data, callback) {
      const startTime = Date.now();
      const dataSize = JSON.stringify(data).length;
      
      // 检查数据大小
      if (dataSize > 1024 * 100) { // 100KB
        console.warn(`Large setData detected: ${dataSize} bytes`, data);
      }
      
      const result = originalSetData.call(this, data, () => {
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        // 记录性能数据
        this._performanceData = this._performanceData || [];
        this._performanceData.push({
          type: 'setData',
          duration,
          dataSize,
          timestamp: startTime,
        });
        
        if (duration > 16) { // 超过一帧时间
          console.warn(`Slow setData detected: ${duration}ms`);
        }
        
        callback && callback();
      });
      
      return result;
    };
  },

  // 监控页面加载时间
  monitorPageLoad() {
    const originalOnLoad = Page.prototype.onLoad;
    
    Page.prototype.onLoad = function(options) {
      const startTime = Date.now();
      
      this.onReady = () => {
        const loadTime = Date.now() - startTime;
        console.log(`Page load time: ${loadTime}ms`);
        
        // 上报性能数据
        wx.reportAnalytics('page_load_time', {
          page: this.route,
          duration: loadTime,
        });
      };
      
      return originalOnLoad.call(this, options);
    };
  },

  // 内存使用监控
  monitorMemoryUsage() {
    setInterval(() => {
      const memoryInfo = wx.getMemoryInfo && wx.getMemoryInfo();
      if (memoryInfo) {
        console.log('Memory usage:', memoryInfo);
        
        // 内存使用过高警告
        if (memoryInfo.usedJSHeapSize / memoryInfo.totalJSHeapSize > 0.8) {
          console.warn('High memory usage detected');
        }
      }
    }, 30000); // 每30秒检查一次
  },
};
```

### 错误监控和上报
```javascript
// 错误监控系统
const ErrorMonitor = {
  init() {
    // 全局错误捕获
    wx.onError((error) => {
      this.reportError('js_error', error);
    });

    // Promise错误捕获
    wx.onUnhandledRejection((event) => {
      this.reportError('promise_rejection', event.reason);
    });

    // 组件错误边界
    this.setupComponentErrorBoundary();
  },

  reportError(type, error) {
    const errorInfo = {
      type,
      message: error.message || error.toString(),
      stack: error.stack,
      timestamp: Date.now(),
      userAgent: wx.getSystemInfoSync(),
    };

    console.error('Error reported:', errorInfo);

    // 上报到监控服务
    wx.request({
      url: 'https://your-monitor-service.com/errors',
      method: 'POST',
      data: errorInfo,
    });
  },

  setupComponentErrorBoundary() {
    const originalComponent = Component;
    
    Component = function(options) {
      // 包装methods中的每个方法
      if (options.methods) {
        Object.keys(options.methods).forEach(methodName => {
          const originalMethod = options.methods[methodName];
          
          options.methods[methodName] = function(...args) {
            try {
              return originalMethod.apply(this, args);
            } catch (error) {
              ErrorMonitor.reportError('component_method_error', {
                componentName: this.is,
                methodName,
                error,
              });
              throw error;
            }
          };
        });
      }
      
      return originalComponent(options);
    };
  },
};
```

## 🚀 自动化工具

### 构建时质量检查
```javascript
// webpack插件：构建时质量检查
class QualityCheckPlugin {
  apply(compiler) {
    compiler.hooks.compilation.tap('QualityCheckPlugin', (compilation) => {
      compilation.hooks.optimizeAssets.tap('QualityCheckPlugin', (assets) => {
        // 检查包大小
        Object.keys(assets).forEach(assetName => {
          const asset = assets[assetName];
          const size = asset.size();
          
          if (size > 1024 * 1024) { // 1MB
            console.warn(`Large asset detected: ${assetName} (${size} bytes)`);
          }
        });

        // 检查重复代码
        this.checkDuplicateCode(assets);
        
        // 检查未使用的代码
        this.checkUnusedCode(assets);
      });
    });
  }

  checkDuplicateCode(assets) {
    // 简单的重复代码检测逻辑
    const codeBlocks = new Map();
    
    Object.values(assets).forEach(asset => {
      const content = asset.source();
      const lines = content.split('\n');
      
      // 检查重复的代码块（简化版本）
      for (let i = 0; i < lines.length - 5; i++) {
        const block = lines.slice(i, i + 5).join('\n');
        if (codeBlocks.has(block)) {
          console.warn('Duplicate code block detected');
        } else {
          codeBlocks.set(block, true);
        }
      }
    });
  }

  checkUnusedCode(assets) {
    // 检查未使用的方法和变量
    // 这里需要结合AST分析实现
    console.log('Checking for unused code...');
  }
}
```

### 持续集成配置
```yaml
# .github/workflows/quality-check.yml
name: Quality Check

on: [push, pull_request]

jobs:
  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Check bundle size
      run: npm run build:analyze
      
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
```
