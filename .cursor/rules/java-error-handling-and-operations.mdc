---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# Java项目错误码与异常处理规范

本规则基于阿里巴巴Java开发手册和现有项目规范，专注于错误码定义、异常处理、日志记录等方面的最佳实践。

## 错误码规范
### 【强制】错误码格式
1. 错误码为5位数字，格式为：`[A][BB][CC]`
   - A：错误级别，1-系统级，2-服务级，3-业务级
   - BB：模块编号，如：01-用户，02-订单 (建议与Maven子模块或DDD限界上下文对应，确保分配唯一)
   - CC：具体错误编号，如：01-参数错误，02-权限不足
2. 示例：10101-系统级用户模块参数错误

### 【强制】错误码定义
1. 错误码必须在枚举类中统一定义
2. 错误码枚举类必须实现 IErrorCode 接口
3. 错误码必须有清晰的注释说明
4. 错误码必须有对应的错误信息模板 (例如："用户ID {0} 不存在"，消息应支持占位符，并考虑国际化需求)

### 【强制】错误码分类
1. 系统级错误（1xxxx）
   - 10000：系统未知异常
   - 10001：系统维护中
   - 10002：服务暂时不可用
   - 10003：系统繁忙，请稍后重试
2. 服务级错误（2xxxx）
   - 20001：参数校验失败
   - 20002：接口调用失败
   - 20003：数据库操作失败
   - 20004：缓存操作失败
3. 业务级错误（3xxxx）
   - 30001：用户未登录
   - 30002：权限不足
   - 30003：操作频繁
   - 30004：资源不存在

## 异常处理规范

### 【强制】异常分类
1. 业务异常：BizException，用于处理可预期的业务错误
2. 系统异常：SystemException，用于处理不可预期的系统错误 (通常由框架层或基础设施故障引起，应用层应尽量避免直接抛出)
3. 参数异常：IllegalArgumentException，用于处理参数校验错误 (通常由框架在Controller层校验JSR303注解时自动抛出，或在业务代码中对不符合方法契约的参数显式抛出)
4. **【推荐】领域异常 (DomainException)**：可继承自 `BizException`，用于表示领域模型内部业务规则校验失败的特定场景 (例如：`OrderCancelledException`，`InsufficientInventoryException`)。此类异常通常由领域实体或领域服务抛出。

### 【强制】异常处理原则
1. 禁止直接抛出 new RuntimeException()
2. 禁止捕获异常后不处理或仅简单打印堆栈到控制台 (应使用日志框架按级别记录，并考虑是否需要转换为标准异常抛出)
3. 禁止在 finally 块中抛出异常 (若finally中发生异常，应记录日志，避免覆盖try块中原有异常)
4. 禁止在循环中抛出异常 (若确需处理，应在循环外聚合或选择性处理)
5. 禁止直接使用 Throwable 和 Exception 捕获异常 (应捕获更具体的异常类型，以进行针对性处理)

### 【强制】异常处理方式
1. Controller 层：
   - 统一使用 @RestControllerAdvice 处理异常
   - 必须对所有已知异常进行处理 (包括 `BizException`, `SystemException`, JSR303校验的 `BindException`或`MethodArgumentNotValidException` 等)
   - 必须有统一的未知异常处理 (通常捕获 `Exception.class` 或 `Throwable.class` 作为最后防线，返回通用系统错误码和消息)
2. Service 层 (应用服务层 Application Service):
   - 主要抛出 `BizException` (或其子类如 `DomainException`) 给Controller层。
   - 必须转换第三方库/服务异常 (如 `IOException`, `RpcException`) 或基础设施层异常 (如 `DataAccessException` 如果未在Repository层转换) 为 `BizException` 或 `SystemException`，并附带合适的错误码和上下文信息。
   - 必须处理事务异常 (Spring通常会将事务相关的底层异常包装为 `DataAccessException` 的子类，应被捕获并转换为合适的 `BizException` 或 `SystemException`)。
3. DAO 层 / Repository 实现层:
   - 主要处理数据库相关异常 (如 `SQLException`)。
   - 必须转换 `SQLException` 为Spring的 `DataAccessException` 体系中的具体异常 (如 `DuplicateKeyException`, `DataAccessResourceFailureException` 等)，或者一个统一的自定义 `PersistenceException` (可作为 `SystemException` 的子类，或 `BizException` 并使用2xxxx系列数据库操作错误码)。**不建议DAO层直接了解或抛出 `BizException`。**
4. 工具类：
   - 抛出具体异常，不做统一处理
   - 必须在文档中说明可能抛出的异常

## 日志规范

### 【强制】日志配置
1. 必须使用 SLF4J + Logback 组合
2. 必须按照不同级别配置日志
3. 必须按照日期切分日志文件
4. 必须配置异步日志提高性能
5. 必须配置日志保留时间

### 【强制】日志级别使用规范
1. ERROR：系统级严重错误，影响系统正常运行
2. WARN：业务级警告，不影响系统正常运行
3. INFO：重要业务操作信息
4. DEBUG：开发调试信息，生产环境关闭
5. TRACE：仅用于开发环境，生产环境禁用

### 【强制】日志内容规范
1. **语言与清晰度**：
   *   日志信息应主要使用**中文**，确保清晰、准确、易于理解。
   *   避免使用模棱两可或过于简略的表述。
2. **变量处理与占位符**：
   *   **必须使用 SLF4J 的参数化日志方式**，即使用占位符 `{}`，而不是字符串拼接。例如：
       ```java
       // 正确示例
       log.info("用户 {} 尝试登录，结果：{}", userId, loginStatus);
       // 记录异常时，将异常对象作为最后一个参数传入，日志框架会自动打印堆栈
       log.error("处理订单 {} 发生错误，错误码：{}，详情：{}", orderId, errorCode, detailInfo, exception);

       // 错误示例 (禁止字符串拼接)
       // log.info("用户 " + userId + " 尝试登录，结果：" + loginStatus);
       ```
   *   这样做可以提高性能（仅在日志级别允许时才进行字符串格式化），并增强日志的可读性和后续分析的便利性。
3. **核心业务信息**：
   *   必须记录关键业务操作的**入参**和**出参**（或关键结果）。对于复杂对象，可选择记录其核心字段或 `toString()`（确保 `toString()` 实现不包含敏感信息且可读性好，推荐使用Lombok的`@ToString(exclude={"sensitiveField"})`）。**【推荐】**对于重要的请求/响应对象，考虑使用JSON序列化（如Jackson）进行结构化日志记录，便于后续分析。
   *   必须记录重要状态的变更信息，例如订单状态流转、用户状态变化等。
4. **异常信息**：
   *   记录异常时，必须包含完整的异常堆栈信息，以便于定位问题根源。通常日志框架的 `error(String msg, Throwable t)` 方法会自动处理。
5. **追踪信息**：
   *   必须包含追踪信息，如请求ID（Trace ID）、用户ID（若适用）、会话ID等，以便于在分布式系统中追踪完整的调用链。**【推荐】**通过集成如SkyWalking、Zipkin等APM工具，利用其MDC（Mapped Diagnostic Context）能力自动注入和传播Trace ID。
6. **敏感信息处理**：
   *   **严禁**在日志中记录明文的敏感信息，如用户密码、完整的身份证号、银行卡号、密钥、Token等。如果业务分析确实需要某些敏感信息的片段或脱敏形式，必须按照公司安全规范进行严格的脱敏处理。参考"七、安全规范"中的"日志安全"。

### 【强制】日志格式规范
1. 时间戳：yyyy-MM-dd HH:mm:ss.SSS
2. 日志级别：ERROR/WARN/INFO/DEBUG/TRACE
3. 进程ID：[PID]
4. 线程名：[ThreadName]
5. 类名：完整类名
6. 方法名：方法名
7. 行号：行号
8. 消息体：具体日志信息

## 统一响应规范

### 【强制】响应格式
```java
public class Result<T> {
    private Integer code;      // 状态码
    private String message;    // 提示信息
    private T data;           // 响应数据
    private Long timestamp;   // 响应时间戳
    private String traceId;   // 请求追踪ID
}
```

### 【强制】响应状态码
1. HTTP标准状态码应作为响应的HTTP Status Code返回 (例如，`@RestControllerAdvice`中根据异常类型设置)。
2. `Result.code` 字段存储5位内部错误码。
   - 200 (HTTP OK): `Result.code` 通常为表示成功的业务码 (例如 `00000` 或特定成功码，若需区分多种成功状态) 或HTTP 200本身。
   - 400 (HTTP Bad Request): `Result.code` 为参数校验相关的2xxxx错误码 (如 `20001`)。
   - 401 (HTTP Unauthorized): `Result.code` 为认证失败相关的3xxxx错误码 (如 `30001`)。
   - 403 (HTTP Forbidden): `Result.code` 为权限不足相关的3xxxx错误码 (如 `30002`)。
   - 404 (HTTP Not Found): `Result.code` 为资源不存在相关的3xxxx错误码 (如 `30004`)。
   - 429 (HTTP Too Many Requests): `Result.code` 为操作频繁相关的3xxxx错误码 (如 `30003`)。
   - 500 (HTTP Internal Server Error): `Result.code` 为系统级1xxxx错误码或未捕获的服务级2xxxx错误码。

### 【强制】异常响应处理
1. 统一使用 Result 包装响应数据。
2. 服务端抛出的受控异常 (`BizException`, `SystemException`) 必须携带预定义的错误码，`@RestControllerAdvice` 中根据异常类型和错误码填充 `Result`对象的 `code` 和 `message` 字段，并设置相应的HTTP状态码。
3. 系统异常 (如未捕获的 `RuntimeException` 或 `SystemException`) 统一返回表示系统内部错误的HTTP状态码500，以及对应的1xxxx系列内部错误码。
4. 业务异常 (`BizException` 或其子类如 `DomainException`) 根据其携带的错误码（通常是3xxxx系列）和信息，填充 `Result` 对象，并通常返回HTTP 200 OK（表示业务处理本身已完成，但结果是业务失败）或特定的HTTP 4xx状态码（如400, 404等，取决于错误性质）。**团队需统一约定业务失败时返回的HTTP状态码策略。**
5. 必须包含请求追踪ID (`traceId`) 在 `Result` 对象中，便于问题排查。

## 参数校验规范

### 【强制】校验方式
1. Controller层方法参数 (请求体DTO、路径变量、查询参数)：优先使用JSR303/JSR349 (Bean Validation) 注解进行声明式校验，并由框架 (如Spring MVC) 自动执行。
2. Service层 (应用服务层)：
   - **必须对核心业务参数进行深度校验**，包括业务规则校验、状态一致性校验、跨字段校验、依赖资源存在性校验等，这些通常无法仅通过JSR303注解完成。
   - 对于从Controller层传入的已校验过的DTO，Service层可选择性地信任其基本格式的正确性，但仍需进行业务层面的校验。
3. 自定义校验注解必须实现 `ConstraintValidator`。
4. `@RestControllerAdvice` 中必须有统一的处理器（如处理 `MethodArgumentNotValidException`, `BindException`, `ConstraintViolationException`）将校验失败信息转换为标准的 `Result` 错误响应，并使用 `20001-参数校验失败` 或更细分的参数错误码。

### 【强制】校验规则
1. 必填字段：@NotNull, @NotEmpty, @NotBlank
2. 长度限制：@Length, @Size
3. 范围限制：@Min, @Max, @Range
4. 格式校验：@Email, @Pattern
5. 自定义校验：根据业务需求实现

## 安全规范

### 【强制】异常信息处理
1. 生产环境禁止直接返回异常堆栈信息
2. 敏感信息必须脱敏后记录日志
3. 异常信息必须规范化后返回给用户
4. 系统异常统一返回"系统繁忙"
5. 必须记录完整异常堆栈到日志系统 