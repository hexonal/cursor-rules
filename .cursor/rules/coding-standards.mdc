---
description: 
globs: 
alwaysApply: false
---
# 小程序编码规范

---
## 📋 规则元数据
- **规则类型**: 平台基础规则 (Platform Foundation Rules)
- **作用域**: 代码风格、命名约定、结构规范
- **自动附加条件**: 所有 `*.js`, `*.ts` 文件
- **优先级**: 基础规范 (Priority: 90)
- **被引用于**: [微信小程序开发规则](mdc:.cursor/rules/miniprogram-development-rules.mdc)
- **冲突解决**: 项目特定规范 > 通用编码规范

## 📚 规则作用
- **代码一致性**: 确保团队代码风格统一
- **可读性提升**: 标准化命名和结构
- **维护效率**: 降低代码理解和维护成本
---

## 📝 代码风格规范

### 命名约定
```javascript
// ✅ 正确的命名方式
// 1. 变量和函数使用驼峰命名
const messageList = [];
const currentConversationID = '';

// 2. 常量使用大写下划线
const MAX_MESSAGE_LENGTH = 500;
const MESSAGE_TYPE_TEXT = 'text';

// 3. 组件方法命名规范
methods: {
  // 公共方法以$开头
  $sendMessage() {},
  
  // 事件处理以handle开头
  handleUserInput() {},
  handleLongPress() {},
  
  // 内部方法使用动词+名词
  getMessage() {},
  updateMessageList() {},
  
  // 回调方法以on开头
  onMessageReceived() {},
  onNetworkError() {},
}

// ❌ 错误的命名方式
const msg = [];           // 过于简略
const handleClick() {}    // 不够具体
const getData() {}        // 过于泛化
```

### 文件命名规范
```
components/
├── MessageInput/        # 组件目录使用PascalCase
│   ├── index.js        # 入口文件统一命名index
│   ├── index.wxml      # 模板文件
│   ├── index.wxss      # 样式文件
│   └── index.json      # 配置文件
└── utils/
    ├── message-parse.js # 工具文件使用kebab-case
    └── date-formatter.js
```

## 🎯 代码结构规范

### 组件代码结构顺序
```javascript
Component({
  // 1. 组件配置
  options: {
    multipleSlots: true,
  },

  // 2. 属性定义
  properties: {
    // 按字母顺序排列
    conversation: { /* ... */ },
    messageList: { /* ... */ },
    unreadCount: { /* ... */ },
  },

  // 3. 初始数据
  data: {
    // 按逻辑分组，添加注释说明
    // 界面状态
    isShowConversation: false,
    popupToggle: false,
    
    // 业务数据
    messageList: [],
    currentUser: {},
    
    // 配置信息
    config: {},
  },

  // 4. 生命周期（按执行顺序）
  lifetimes: {
    created() {},
    attached() {},
    ready() {},
    moved() {},
    detached() {},
  },

  // 5. 页面生命周期
  pageLifetimes: {
    show() {},
    hide() {},
  },

  // 6. 组件方法（按功能分组）
  methods: {
    // 初始化方法
    init() {},
    initCallKit() {},
    
    // 公共API方法
    $sendMessage() {},
    $getMessage() {},
    
    // 事件处理方法
    handleUserInput() {},
    handleSendMessage() {},
    
    // 内部逻辑方法
    formatMessage() {},
    validateInput() {},
    
    // 清理方法
    destroy() {},
    cleanup() {},
  },
});
```

### 函数设计规范
```javascript
// ✅ 好的函数设计
// 1. 单一职责，功能明确
function formatMessageTime(timestamp) {
  return dayjs(timestamp).format('HH:mm');
}

// 2. 参数校验
function sendMessage(message) {
  if (!message || !message.content) {
    throw new Error('Message content is required');
  }
  // 发送逻辑...
}

// 3. 错误处理
async function uploadFile(file) {
  try {
    const result = await wx.uploadFile(file);
    return result;
  } catch (error) {
    logger.error('Upload failed:', error);
    throw new Error('文件上传失败');
  }
}

// 4. 适当的注释
/**
 * 处理长按录音功能
 * @param {Object} e - 事件对象
 * @param {Object} e.touches - 触摸点信息
 */
handleLongPress(e) {
  this.setData({
    startPoint: e.touches[0],
    isRecording: true,
  });
}
```

## 📋 注释规范

### 文件头注释
```javascript
/**
 * @fileoverview 消息输入组件 - 支持文本、语音、图片等多种消息类型输入
 * @author 开发者姓名
 * @date 2024-01-01
 * @version 1.0.0
 */
```

### 函数注释
```javascript
/**
 * 发送文本消息
 * @param {string} content - 消息内容
 * @param {Object} options - 可选配置
 * @param {string} options.conversationID - 会话ID
 * @param {boolean} options.needReceipt - 是否需要已读回执
 * @returns {Promise<Object>} 发送结果
 * @throws {Error} 当消息内容为空时抛出错误
 */
async sendTextMessage(content, options = {}) {
  // 实现逻辑...
}
```

### 业务逻辑注释
```javascript
methods: {
  handleTouchStart() {
    // 检查录音权限
    wx.getSetting({
      success: async (res) => {
        const isRecord = res.authSetting['scope.record'];
        // 首次获取权限时, isRecord === undefined
        // 需使用 recorderManager 内置调用权限功能
        if (isRecord === false) {
          // 首次未授权，需要走 wx.authorize 授权流程
          this.requestRecordPermission();
        } else {
          this.recorderStart();
        }
      },
    });
  },
}
```

## 🛡️ 错误处理规范

### 统一错误处理模式
```javascript
// 参考 [utils/constant.js](mdc:utils/constant.js) 的错误码设计
const ErrorHandler = {
  // 网络错误处理
  handleNetworkError(error) {
    wx.showToast({
      title: '网络连接失败，请检查网络设置',
      icon: 'none',
    });
    logger.error('Network error:', error);
  },

  // 业务错误处理
  handleBusinessError(errorCode) {
    const errorMap = {
      [constant.MESSAGE_ERROR_CODE.DIRTY_WORDS]: '消息包含违禁词汇',
      [constant.MESSAGE_ERROR_CODE.UPLOAD_FAIL]: '文件上传失败',
      // 更多错误码...
    };
    
    const message = errorMap[errorCode] || '操作失败，请重试';
    wx.showToast({
      title: message,
      icon: 'none',
    });
  },
};
```

### 防御性编程
```javascript
// ✅ 好的防御性编程
methods: {
  updateMessageList(newMessage) {
    // 参数校验
    if (!newMessage || typeof newMessage !== 'object') {
      logger.warn('Invalid message object');
      return;
    }

    // 边界条件检查
    const messageList = this.data.messageList || [];
    if (messageList.length >= MAX_MESSAGE_COUNT) {
      logger.warn('Message list exceeds maximum count');
      messageList.shift(); // 移除最早的消息
    }

    // 安全的数据更新
    this.setData({
      messageList: [...messageList, newMessage],
    });
  },
}
```
