---
description: 
globs: 
alwaysApply: false
---
# Java设计模式应用原则与智能辅助规范

本规范提供设计模式应用的基本原则、智能辅助工具使用指导和规范集成约束，确保设计模式的正确选择和实施。

## 一、设计模式应用原则与约束

### 【强制】设计模式引入条件
1. **必须满足以下条件之一才可引入设计模式**：
   ```
   提示词：@codebase 分析这段代码是否满足设计模式引入条件：
   1. 存在3个以上相似的实现类或方法
   2. 业务逻辑存在明确的变化点和扩展需求
   3. 现有if-else分支超过5个且逻辑复杂
   4. 对象创建过程复杂且需要多步骤验证
   5. 需要解耦具体实现与接口调用
   ```

2. **禁止过度设计**：
   - 禁止为了使用设计模式而设计模式
   - 禁止在简单场景中引入复杂模式
   - 禁止同时使用多个设计模式导致过度抽象

### 【强制】设计模式命名规范
1. **工厂类命名**：`业务名称 + Factory`
   - 正确：`OrderFactory`、`UserFactory`、`PaymentFactory`
   - 错误：`CreateOrder`、`OrderCreator`、`OrderBuilder`（Builder是另一种模式）

2. **策略类命名**：`具体策略描述 + Strategy`
   - 正确：`FixedAmountDiscountStrategy`、`PercentageDiscountStrategy`
   - 错误：`DiscountHandler`、`DiscountProcessor`、`DiscountService`

3. **适配器类命名**：`外部系统名称 + Adapter`
   - 正确：`AlipayPaymentAdapter`、`WechatPaymentAdapter`
   - 错误：`PaymentIntegration`、`PaymentGateway`

## 二、Cursor智能辅助与规范检查

### 【推荐】设计模式智能选择
1. **模式选择提示词**：
   ```
   @codebase 分析当前代码结构，推荐最适合的设计模式：
   
   场景描述：[具体业务场景]
   现有问题：[当前代码存在的问题]
   期望目标：[希望达到的效果]
   
   请基于项目现有的设计模式实现，推荐最合适的模式并说明理由。
   ```

2. **模式适用性检查**：
   ```
   @codebase 检查以下设计模式是否适用于当前场景：
   
   候选模式：[工厂模式/策略模式/适配器模式等]
   应用场景：[具体使用场景]
   
   请分析：
   1. 是否满足该模式的适用条件
   2. 与项目现有架构的兼容性
   3. 实施的复杂度和收益
   ```

### 【推荐】设计模式实现检查
1. **实现规范检查**：
   ```
   @codebase 检查这个设计模式实现是否符合项目规范：
   
   [粘贴设计模式实现代码]
   
   请检查：
   1. 命名是否符合项目规范
   2. 结构是否完整和正确
   3. 是否遵循了最佳实践
   4. 与现有代码的一致性
   ```

2. **性能和可维护性评估**：
   ```
   @codebase 评估这个设计模式实现的性能和可维护性：
   
   [粘贴设计模式实现代码]
   
   请分析：
   1. 性能影响和优化建议
   2. 可维护性和扩展性
   3. 潜在的问题和风险
   ```

### 【推荐】设计模式组合使用检查
1. **模式组合兼容性**：
   ```
   @codebase 检查多个设计模式组合使用的合理性：
   
   使用的模式：[模式1 + 模式2 + ...]
   组合场景：[具体应用场景]
   
   请分析：
   1. 模式间是否存在冲突
   2. 组合的必要性和合理性
   3. 简化的可能性
   ```

## 三、规范集成与约束

### 【重要】与其他规范的强制约束
1. **与代码质量规范的集成**：
   - 设计模式实现必须符合阿里巴巴Java开发手册
   - 必须通过SonarQube质量检查
   - 必须编写对应的单元测试

2. **与架构规范的集成**：
   - 设计模式必须符合DDD分层架构要求
   - 不能违反依赖倒置原则
   - 必须遵循单一职责原则

3. **与性能规范的集成**：
   - 设计模式不能引入明显的性能问题
   - 必须考虑内存使用和GC影响
   - 复杂模式必须提供性能测试

### 【核心价值】精细化规范的优势
1. **提高开发效率**：
   - 通过Cursor智能提示快速选择合适的模式
   - 基于项目现有实现减少学习成本
   - 标准化的实现模板提高编码速度

2. **保证代码质量**：
   - 强制的命名和结构规范确保一致性
   - 详细的实现指导避免常见错误
   - 与其他规范的集成保证整体质量

3. **促进团队协作**：
   - 统一的设计模式理解和实现方式
   - 清晰的适用场景判断标准
   - 便于代码审查和知识传递

## 四、设计模式文件组织

### 【强制】规范文件结构
本设计模式规范已按类型拆分为以下专项文件：

1. **java-creational-design-patterns.mdc** - 创建型设计模式
   - 工厂模式精细化规范
   - 建造者模式精细化规范
   - 单例模式精细化规范

2. **java-behavioral-design-patterns.mdc** - 行为型设计模式
   - 策略模式精细化规范
   - 观察者模式精细化规范
   - 模板方法模式精细化规范
   - 责任链模式精细化规范
   - 命令模式精细化规范

3. **java-structural-design-patterns.mdc** - 结构型设计模式
   - 适配器模式精细化规范
   - 装饰器模式精细化规范

4. **java-design-patterns-principles.mdc** - 设计模式应用原则（本文件）
   - 设计模式应用原则与约束
   - Cursor智能辅助与规范检查
   - 规范集成与约束

### 【推荐】使用指导
1. **查找特定模式规范**：根据模式类型查阅对应的专项文件
2. **模式选择决策**：参考本文件的应用原则和智能辅助指导
3. **规范集成**：确保遵循本文件的集成约束要求
