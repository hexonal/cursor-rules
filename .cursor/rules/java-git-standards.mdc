---
description: 
globs: 
alwaysApply: true
---
# Java项目Git规范

## 三、代码提交规范

### 【强制】提交信息格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

1. type类型：
   - feat：新功能
   - fix：修复bug
   - docs：文档更新
   - style：代码格式调整
   - refactor：重构代码
   - test：测试用例
   - chore：其他修改
2. scope范围：
   - 影响的功能模块
   - 可选，放在括号中
3. subject主题：
   - 简短描述本次提交
   - 不超过50个字符
   - 使用现在时态
4. body正文：
   - 详细描述改动原因
   - 可以分多行
   - 可选
5. footer脚注：
   - 关闭Issue编号
   - Breaking Changes
   - 可选

### 【强制】提交原则
1. 单一职责：
   - 每次提交只做一件事
   - 相关的改动放在一起
   - 不相关的改动分开提交
2. 提交频率：
   - 小步提交
   - 保持提交粒度合适
   - 避免积压大量改动
3. 提交时机：
   - 功能开发完成
   - 修复bug完成
   - 重构完成
   - 测试用例完成

### 【强制】代码审查
1. 审查要求：
   - 所有代码必须经过审查
   - 至少一个审查人通过
   - 解决所有审查意见
2. 审查内容：
   - 代码规范
   - 业务逻辑
   - 性能问题
   - 安全问题
3. 审查流程：
   - 提交合并请求
   - 指定审查人
   - 修改并更新
   - 审查人确认

### 【强制】AI智能获取Git信息实现规范
1. **Git作者自动获取实现**：
   ```bash
   # 【重要】必须在项目根目录下执行，确保获取项目特定的Git配置
   cd /path/to/project && git config user.name

   # 或者使用相对路径（如果已在项目目录中）
   git config user.name

   # 备选：获取全局Git配置
   git config --global user.name

   # 示例输出：shizeying
   ```

2. **当前时间自动获取实现**：
   ```bash
   # macOS/Linux
   date +%Y-%m-%d

   # Windows (PowerShell)
   Get-Date -Format "yyyy-MM-dd"

   # 示例输出：2025-06-11
   ```

3. **【关键】项目目录路径要求**：
   - **必须在项目根目录下执行Git命令**：确保获取的是当前项目的Git配置，而非全局或其他项目配置
   - **工作目录检查**：AI在执行命令前应确认当前工作目录为项目根目录
   - **路径切换示例**：如当前不在项目目录，需先切换：`cd /Users/zeyingshi/IdeaProjects/coding && git config user.name`

3. **AI代码生成标准流程**：
   ```java
   // AI生成代码时的标准注释模板示例
   /**
    * 任务处理控制器
    * 提供任务查询、完成、奖励领取等相关接口服务
    *
    * @author shizeying  // 自动从git config user.name获取
    * @date 2025-06-11   // 自动从系统当前日期获取
    * @version 1.0
    */
   ```

4. **实现要求**：
   - **【强制】真实信息**：禁止使用占位符或模板变量，必须使用真实获取的Git作者和时间
   - **【强制】命令执行**：AI必须实际执行系统命令获取信息，不得使用假设或预设值
   - **【强制】路径正确性**：Git命令必须在正确的项目根目录下执行，确保获取项目特定的配置
   - **【强制】格式统一**：日期格式严格使用 `yyyy-MM-dd`，作者名称使用Git配置的真实姓名
   - **【推荐】错误处理**：如果Git信息获取失败，应提供明确的错误信息和备选方案

5. **验证机制**：
   - 生成的代码注释中的@author字段必须与实际Git配置一致
   - 生成的代码注释中的@date字段必须是当前系统日期
   - 支持多次调用时保持信息的实时性和准确性