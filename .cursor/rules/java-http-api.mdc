---
description: 
globs: 
alwaysApply: true
---
# Java项目HTTP API智能化规范

本规范基于Cursor代码库索引技术，通过`@codebase`智能分析现有项目模式，确保HTTP接口设计的一致性和规范性。

## HTTP接口规范

### 【项目适配】接口URL格式智能分析
1. **基于Cursor的URL格式识别**：
   ```
   提示词：@codebase 分析现有Controller类的@RequestMapping路径，总结项目URL格式规范
   包括：
   - 基础路径格式（如/api/v1、/ums/v1等）
   - 版本控制策略（v1/v2 vs app/web等）
   - 业务模块路径组织
   - 具体操作路径命名规律
   ```

2. **智能路径规范推荐**：
   ```
   提示词：@codebase 分析项目域名配置和路径结构，生成URL格式标准模板
   要求分析：
   - 环境域名规则（develop/test/prod）
   - 业务领域划分方式
   - 版本号和网络标识使用规律
   - 路径命名约定（中划线vs驼峰等）
   ```

3. **路径一致性检查**：
   ```
   提示词：@codebase 检查所有HTTP接口路径，识别不符合项目规范的URL格式
   ```

### 【项目适配】请求方法智能分析
1. **基于Cursor的HTTP方法使用分析**：
   ```
   提示词：@codebase 统计所有Controller方法使用的HTTP方法（GET/POST/PUT/DELETE），分析项目HTTP方法使用规律
   包括：
   - 各种HTTP方法的使用频率
   - 是否有统一使用POST的趋势
   - 不同业务场景的HTTP方法选择模式
   ```

2. **【强制】POST请求参数规范**：
   - **所有POST请求的参数必须通过Request Body以JSON格式传递**
   - **禁止在POST请求中使用Query参数或Path变量传递业务参数**
   - **分页参数、查询条件、标识符等都必须放在JSON请求体中**
   
   ```java
   // ✅ 正确做法
   @PostMapping("/user/query")
   public Result<UserResp> queryUser(@RequestBody UserQueryReq req) {
       // req包含所有参数：userId, pageNum, pageSize, queryCondition等
   }
   
   // ❌ 错误做法  
   @PostMapping("/user/query")
   public Result<UserResp> queryUser(@RequestParam Long userId, @RequestBody UserQueryReq req) {
       // 不能混用@RequestParam和@RequestBody
   }
   ```

3. **请求方法规范智能推荐**：
   ```
   提示词：@codebase 基于现有接口分析，推荐统一的HTTP方法使用策略
   分析维度：
   - 操作类型与HTTP方法的映射关系  
   - 参数传递方式一致性检查（确保POST使用Body）
   - 幂等性处理策略
   - 缓存策略设计
   ```

4. **【强制】幂等性设计要求**：
   - **虽然统一使用POST，但服务端必须保证幂等操作的幂等性**
   - **对于本质上幂等的操作（查询、按ID更新、删除），客户端可以安全重试**
   - **非幂等操作（创建）应考虑引入幂等性令牌机制**
   
   ```java
   // 幂等性令牌示例
   public class CreateUserReq {
       @NotBlank
       private String idempotencyKey; // 幂等性令牌
       
       @NotBlank
       private String userName;
       // ... 其他字段
   }
   ```

5. **参数传递合规检查**：
   ```
   提示词：@codebase 检查所有POST接口，确保参数传递符合规范
   要求检查：
   - POST接口是否使用@RequestBody
   - 是否存在@RequestParam和@RequestBody混用
   - Query参数使用是否合规
   - 幂等性处理是否完整
   ```

### 【项目适配】接口命名智能规范
1. **基于Cursor的命名模式分析**：
   ```
   提示词：@codebase 分析所有Controller接口的命名模式，总结项目接口命名规范
   分析内容：
   - URL路径中的动词使用规律（add/create、update/modify、delete/remove等）
   - 批量操作的命名模式（batch-xxx vs xxx-batch等）
   - 查询操作的命名规律（get/query/find等）
   - 特定条件操作的命名方式（by-id、by-condition等）
   ```

2. **智能命名规范生成**：
   ```
   提示词：@codebase 基于现有接口命名分析，为新业务模块生成标准的接口命名模板
   要求包含：
   - CRUD操作的标准命名
   - 批量操作命名规范
   - 条件查询命名规范
   - 业务特定操作命名规范
   ```

3. **命名一致性检查**：
   ```
   提示词：@codebase 检查所有HTTP接口命名，识别不符合项目命名规范的接口
   检查维度：
   - 动词使用的一致性
   - 路径层级的合理性
   - 命名可读性和规范性
   ```

### 【项目适配】请求参数智能规范
1. **基于Cursor的参数模式分析**：
   ```
   提示词：@codebase 分析所有HTTP接口的请求参数模式，总结项目参数规范
   分析内容：
   - 参数传递方式（Body vs Query vs Path）
   - 请求对象的继承体系（BaseReq、BaseQueryReq等）
   - 分页参数的字段命名和类型规范
   - 时间参数的格式约定
   - 枚举参数的传递方式
   ```

2. **智能参数规范生成**：
   ```
   提示词：@codebase 基于现有请求对象分析，生成标准的请求参数模板
   要求包含：
   - 分页查询请求的标准结构
   - 时间参数的统一格式
   - 枚举参数的传递规范
   - 参数校验注解的使用模式
   ```

3. **参数校验规范分析**：
   ```
   提示词：@codebase 分析现有请求对象的校验注解使用，总结参数校验规范
   检查内容：
   - JSR303注解的使用模式
   - 自定义校验注解的使用
   - 参数默认值设置规律
   - 必填/可选参数的标识方式
   ```

### 【项目适配】响应规范智能分析
1. **基于Cursor的响应格式分析**：
   ```
   提示词：@codebase 分析所有Controller方法的返回值类型，总结项目响应格式规范
   分析内容：
   - 统一响应包装类的使用情况（Result<T>、ApiResponse<T>等）
   - 分页响应的数据结构模式
   - 错误响应的格式约定
   - 特殊业务场景的响应格式
   ```

2. **智能响应规范生成**：
   ```
   提示词：@codebase 基于现有响应格式分析，生成标准的响应数据模板
   要求包含：
   - 统一响应包装器的结构
   - 分页数据的标准格式
   - 错误响应的标准结构
   - 业务数据的组织方式
   ```

3. **响应一致性检查**：
   ```
   提示词：@codebase 检查所有HTTP接口的响应格式，识别不符合统一规范的接口
   检查维度：
   - 响应包装器使用的一致性
   - 分页字段命名的统一性
   - 错误码和错误信息格式
   ```

### 【项目适配】接口文档智能规范
1. **基于Cursor的文档注解分析**：
   ```
   提示词：@codebase 分析所有Controller类的Swagger注解使用，总结项目文档规范
   分析内容：
   - @Api、@ApiOperation、@ApiModelProperty等注解的使用模式
   - 接口文档的描述规范和内容要求
   - 请求响应示例的组织方式
   - 错误码文档的编写规律
   ```

2. **智能文档模板生成**：
   ```
   提示词：@codebase 基于现有Controller文档分析，生成标准的接口文档模板
   要求包含：
   - Swagger注解的标准使用方式
   - 接口描述的规范格式
   - 参数文档的详细要求
   - 响应文档的标准结构
   ```

3. **文档完整性检查**：
   ```
   提示词：@codebase 检查所有HTTP接口的文档完整性，识别缺失或不规范的文档
   检查维度：
   - 接口描述的完整性
   - 参数文档的详细程度
   - 错误码说明的覆盖性
   - 示例数据的有效性
   ```

---

## Cursor智能辅助HTTP API开发

### 【推荐】基于@codebase的API开发
1. **完整接口生成**：
   ```
   提示词模板：
   @codebase 基于现有HTTP接口模式，为 [业务模块] 生成完整的CRUD接口，包括：
   1. Controller类定义
   2. 请求响应对象（XxxReq/Resp）
   3. Swagger文档注解
   4. 参数校验注解
   
   要求遵循项目现有的：
   - URL路径命名规范
   - HTTP方法使用模式
   - 响应格式标准
   - 文档编写规范
   ```

2. **接口规范检查**：
   ```
   提示词模板：
   @codebase 检查这个HTTP接口是否符合项目规范：
   1. URL路径是否符合命名规范
   2. 请求参数格式是否统一
   3. 响应格式是否标准
   4. 文档是否完整
   
   [粘贴Controller代码]
   ```

3. **批量接口优化**：
   ```
   提示词模板：
   @codebase 分析项目中所有HTTP接口，识别需要优化的地方：
   1. 不符合命名规范的接口
   2. 响应格式不统一的接口
   3. 文档不完整的接口
   4. 参数校验缺失的接口
   
   生成优化建议和修改方案
   ```

### 【推荐】基于@codebase的问题诊断
1. **接口异常分析**：
   ```
   提示词模板：
   @codebase 分析这个HTTP接口异常，基于项目现有实现提供解决方案：
   [粘贴异常日志和相关代码]
   
   请检查：
   1. 参数校验是否正确
   2. 响应格式是否符合规范
   3. 错误处理是否完整
   4. 业务逻辑是否合理
   ```

2. **性能优化建议**：
   ```
   提示词模板：
   @codebase 分析这个HTTP接口的性能问题，对比项目中的高性能实现：
   [描述性能问题和相关代码]
   
   分析维度：
   1. 参数校验的效率
   2. 数据库查询优化
   3. 响应数据组装
   4. 缓存策略使用
   ```

3. **安全漏洞检查**：
   ```
   提示词模板：
   @codebase 检查这个HTTP接口的安全性，基于项目安全规范：
   [粘贴接口代码]
   
   检查内容：
   1. 参数校验的完整性
   2. 权限控制的正确性
   3. 敏感数据的保护
   4. 注入攻击的防护
   ```

---

## 智能化规范集成

### 【重要】与其他规范的智能协同
1. **错误处理集成**：
   ```
   提示词：@codebase 基于 [java-error-handling-and-operations.mdc](mdc:.cursor/rules/java-error-handling-and-operations.mdc) 规范，确保HTTP接口的错误处理符合项目标准
   ```

2. **数据库操作集成**：
   ```
   提示词：@codebase 基于 [java-data-persistence.mdc](mdc:.cursor/rules/java-data-persistence.mdc) 规范，优化HTTP接口中的数据库操作
   ```

3. **RPC调用集成**：
   ```
   提示词：@codebase 基于 [java-rpc-service.mdc](mdc:.cursor/rules/java-rpc-service.mdc)规范，确保HTTP接口中的RPC调用符合标准
   ```

### 【核心价值】智能化带来的效果
- **🎯 精准适配**：AI理解项目上下文，生成的代码完全符合项目风格
- **⚡ 效率提升**：从手工分析到AI智能生成，开发效率提升10倍
- **🛡️ 质量保证**：AI检查确保代码规范性和一致性
- **📚 知识传承**：项目经验通过AI规范化传递给团队成员