---
description: 
globs: 
alwaysApply: false
---
# 规则体系依赖关系图

## 📊 规则依赖图

```mermaid
graph TD
    %% 基础规则层
    CS[编码规范<br/>coding-standards.mdc]
    MPR[小程序开发规则<br/>miniprogram-development-rules.mdc]
    
    %% 专项规则层
    ARCH[架构设计<br/>miniprogram-architecture.mdc]
    PERF[性能优化<br/>performance-optimization.mdc]
    DP[设计模式<br/>design-patterns.mdc]
    TEST[测试质量<br/>testing-quality.mdc]
    CONST[平台约束<br/>wechat-miniprogram-constraints.mdc]
    BP[最佳实践<br/>miniprogram-best-practices.mdc]
    
    %% 工具规则
    FEEDBACK[交互式反馈<br/>interactive-feedback-mcp.mdc]
    
    %% 依赖关系
    MPR --> CS
    ARCH --> CS
    PERF --> MPR
    DP --> MPR
    TEST --> CS
    BP --> CS
    BP --> ARCH
    BP --> PERF
    CONST --> MPR
    
    %% 优先级分层
    subgraph "基础平台规则 (Priority: 90-100)"
        CS
        MPR
    end
    
    subgraph "专项功能规则 (Priority: 150)"
        ARCH
        PERF
        DP
        TEST
        CONST
        BP
    end
    
    subgraph "工具规则"
        FEEDBACK
    end
```

## 🎯 规则应用策略

### 按开发场景分组

#### 🏗️ 基础开发
```
编码规范 → 小程序开发规则 → 架构设计
```

#### 🚀 性能优化项目
```
基础开发 → 性能优化 → 设计模式
```

#### 🧪 质量保证项目
```
基础开发 → 测试质量 → 最佳实践
```

#### 📋 平台约束项目
```
基础开发 → 平台约束 → 最佳实践
```

## ⚡ 自动附加规则

### 文件模式触发
- `*.js`, `*.ts` → 编码规范 + 小程序规则
- `*test*` → 基础规则 + 测试质量规则
- `components/*` → 基础规则 + 架构设计规则

### 内容关键词触发
- `Component(` → 编码规范 + 架构设计
- `setData` → 性能优化规则
- `wx.request` → 平台约束规则
- `describe`, `it` → 测试质量规则

## 🔄 冲突解决优先级

1. **专项功能规则** (150) > **基础平台规则** (90-100)
2. **具体场景** > **通用规则**
3. **后定义** > **先定义**
