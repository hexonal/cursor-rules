---
description: 
globs: 
alwaysApply: true
---
# 技术方案设计文档规范（专属规则）

本规则适用于本项目所有技术方案设计文档的撰写与评审，旨在统一结构、内容要素和格式，提升方案质量与评审效率。

---

## 评审要求

**所有需求必须写技术方案。**

| 开发人天范围 | 评审要求 | 复杂度 |
|-------------|---------|--------|
| [0PD~3PD)   | 需小组内飞阅评审，有疑问评论 | 低 |
| [3PD~10PD)  | 小组内评审，复杂方案需各端研发一起 | 中 |
| [10PD~)     | 各端研发、测试一起评审沟通 | 高 |

- **文档命名格式：** `{yyyy.mm.dd} {需求描述}`，如《2023.08.18 灰度服务优化》
- **责任人分工：** 设计人（方案编写/第一责任人）、确认人（核心确认/第二责任人/代码CR）
- **需求leader需汇总对接文档交付前端部门**

---

## 一、需求背景

### 1.1 需求说明
- 简要描述需求背景。
- **相关文档汇总**（如无可不填）：

| 项目 | 相关地址 |
|---|----|
| 飞书流程 |  |
| PRD |  |
| 需求交付文档 |  |
*注：上表中的"相关地址"列为占位符，在实际编写技术方案时，由方案编写者根据具体需求填写。模板中此处应留空。*

### 1.2 名称说明
- 相关名称定义说明（如无可不填）：

| 名称 | 定义说明 |
|------|----------|
|      |          |

## 二、需求分析

### 2.1 设计目标
- 描述本设计核心解决的问题。

### 2.2 用例整理
- 针对核心业务及功能整理研发用例，**预发阶段需完成验证**。

## 三、整体架构

**应包含内容：**
- 中间件、技术方案选型
- 应用依赖关系
- 推荐使用 mermaid 语法绘制架构图
- **所有技术选型、架构设计、模块划分、依赖管理等，必须严格遵循《鱼泡Java项目架构与结构规范》(@yupao-project-architecture-and-structure.mdc)的强制要求。如有特殊情况需单独说明并经架构组评审确认。**

## 四、详细设计

**应包含内容：**
- 整体改动点清单
- 核心功能点的时序、实现逻辑（推荐 mermaid 流程图/时序图）。**注：应优先使用图表清晰表达业务逻辑、状态流转和数据处理过程，避免在方案中直接粘贴大段业务代码。**
- 接口缓存策略、内容
- 熔断、降级方案
- 性能预估、压测
- 定时任务设计
- 数据恢复、迁移实现
- 二方、三方依赖汇总和拉齐（Admin、各端、测试、后端其他业务）
- **详细设计涉及的所有技术实现、依赖、配置、资源管理等，均需符合《鱼泡Java项目架构与结构规范》(@yupao-project-architecture-and-structure.mdc)的强制要求。**

## 五、模型设计

### 5.1 数据库设计
- **ER图**（推荐 mermaid 语法）
- **表结构**（建议 SQL 代码块标注）

```sql
-- SQL语句
```

### 5.2 ElasticSearch索引设计
- 如有ES索引，需填写本项。

### 5.3 缓存设计
- 如有缓存设计，需详细说明。

## 六、发布兼容性

- 需说明数据库、缓存、MQ、接口等兼容性，确保新旧代码/服务并存时数据不冲突。
- **如无兼容性风险也需说明。**

## 七、监控报警

- 复杂业务建议通过统计业务数据趋势发现问题。
- 需说明监控点、报警规则、埋点方案等。

## 八、待讨论点

- 方案中不确定、需沟通讨论的内容点。
- **建议在方案评审前后动态补充。**

| 讨论项 | 结论 |
|--------|------|
|        |      |
|        |      |

## 九、评审纪要

- 评审纪要和结论。
- **建议在评审后及时补充完善。**

---

## 十、方案编写与AI协作增强指南

### 10.1 善用工具与方法激活深度思考
- **激活信息检索与专题研究能力 (如调用 `mcp_context7_resolve-library-id`, `mcp_context7_get-library-docs`)**：在方案设计初期，当面对复杂技术选型、需引入新依赖或需深入理解特定技术领域时，应主动引导（或协助AI）调用如 Context7 相关的MCP能力。通过精确的库/文档ID解析和目标主题的文档获取，进行高效、权威的信息检索与专题研究，确保技术决策的准确性和前瞻性。这不仅是简单的信息查找，更是激活模型针对性学习和分析能力的手段。
- **激活结构化与发散性思维能力 (如调用 `mcp_sequential-thinking_sequentialthinking`)**：对于需要系统性梳理、多角度权衡或创新性突破的复杂问题，强烈推荐运用或引导AI调用 Sequential Thinking 相关的MCP能力。该方法鼓励通过定义总思考步数、分支探索、阶段性修正等方式，进行多轮次、迭代式、可追溯的深度思考。这有助于将一个庞杂的问题分解为有序的思考单元，系统性地探索解决方案空间，验证关键假设，从而显著提升方案的逻辑严谨性、覆盖面和创新深度。

### 10.2 促进AI与规范的深度融合
- **明确规范引导AI**：在与AI协作编写技术方案时，应主动提供本项目相关的核心设计规范文档（如本规范 `@tech-solution-doc-spec.mdc`，以及 `@yupao-code-development-and-quality.mdc`, `@yupao-project-architecture-and-structure.mdc` 等）作为AI的核心上下文。要求AI在生成内容时严格遵循这些规范。
- **具体化指令与反馈**：向AI提问或要求生成方案内容时，指令应尽可能具体，并明确指出需要参照哪条规范。在AI生成内容后，基于规范进行细致审查，并给出明确的、指向具体规范条款的反馈，帮助AI更好地理解和应用规范。
- **利用AI进行规范检查与优化建议**：可尝试引导AI基于已提供的规范文档，对方案的草稿进行初步的规范符合性检查，或就某些设计点征询其是否符合某项规范的建议。

### 10.3 持续迭代与知识沉淀
- **经验总结与规范反哺**：在项目实践中，若发现AI协作的良好实践或现有规范有待完善之处，应及时总结，并考虑将其经验或建议补充到相关规范文档中，形成正向循环，持续提升团队整体的方案设计水平和AI协作效率。

---

## 格式与内容规范

- 标题层级清晰，建议最多三级标题。
- 架构图与各类图示建议统一采用 mermaid 语法。**技术方案中，应积极运用合适的图表类型清晰、直观地表达设计思路，以下是一些常用 Mermaid 图表类型及其适用场景建议：**
  - **流程图 (Flowchart Diagram, `graph TD` 或 `flowchart TD`)**: 适用于描述业务流程、操作步骤、决策逻辑、数据流向等。是展现过程和顺序的首选。
  - **时序图 (Sequence Diagram, `sequenceDiagram`)**: 重点展示对象之间的交互和消息传递顺序，非常适合描述API调用、模块间协作、分布式事务等场景的时序关系。
  - **状态图 (State Diagram, `stateDiagram-v2`)**: 用于描述一个对象或系统在其生命周期内可能经历的各种状态以及状态之间的转换条件和触发事件。适合表达对象状态机、工作流状态变迁等。
  - **类图 (Class Diagram, `classDiagram`)**: 展示系统中的类、接口及其属性、方法和它们之间的静态关系（如继承、实现、关联、依赖）。适合在模型设计章节中描述核心领域模型或重要类的结构。
  - **ER图 (Entity Relationship Diagram, `erDiagram`)**: 专门用于数据库设计，展示实体（表）、属性（字段）以及实体之间的关系（一对一、一对多、多对多）。是数据库模型设计的核心图示。
  - **用户旅程图 (User Journey Diagram, `journey`)**: 描述用户为达成某一目标所经历的步骤、接触点、情绪变化等。有助于从用户视角理解需求和设计体验。
  - **甘特图 (Gantt Chart, `gantt`)**: 常用于项目管理，展示任务排期、起止时间、依赖关系和进度。在方案中可用于表示复杂的发布计划或多阶段任务的执行顺序。
  - **需求图 (Requirement Diagram, `requirementDiagram`)**: 用于可视化需求及其之间的关系（如包含、验证、细化）。在需求分析章节或梳理复杂需求依赖时可考虑使用。
  - **Git图 (Gitgraph Diagram, `gitGraph`)**: 用于展示Git分支历史、合并、提交等操作。在涉及复杂分支策略或版本发布流程说明时非常有用。
  - **时间线图 (Timeline, `timeline`)**: 按时间顺序展示一系列关键事件、里程碑或阶段性成果，适合用于项目规划、版本历史回顾或重要变更的演进过程。
  - **C4 模型图 (C4 Model, 使用 `C4Context`, `C4Container`, `C4Component`, `C4Dynamic`, `C4Deployment` 等关键字)**: 用于从不同抽象层次（如系统上下文、容器、组件）描述软件架构，有助于清晰地沟通系统结构和边界。
  - **桑基图 (Sankey Diagram, `sankey-beta`)**: 有效展示流程中各个阶段的数量、流量或能量的分配和流转情况，适合分析资源分配、用户流程转化等。
  - **块图 (Block Diagram, `block-beta`)**: 通过不同区块展示系统的高层组件、模块及其相互关系，适合进行概念性架构或模块化设计的初步展示。
  - **饼图 (Pie Chart, `pie`)**: 用于展示各部分占整体的比例，如无特别数据占比分析需求，在技术方案中较少使用。
  **灵活运用与组合**：鼓励根据实际阐述需要，灵活选择最能清晰表达意图的图表类型，甚至组合使用多种图表来从不同维度解析同一复杂问题，以提升方案的可理解性和信息传递效率。
- 关键术语首次出现需解释。
- 代码、SQL、接口等建议用代码块格式标注。
- 重要结论、风险、注意事项需高亮或加粗。
- 文档应保持简洁、逻辑清晰，避免冗余。
- 表格、清单如无内容可不填。

**关于规范性表述的说明：**
- **隐性遵守，显性表达技术本身**：技术方案文档编写的核心目标是清晰、准确地阐述技术决策、设计思路和实施细节。其内容和结构应自然体现并内隐地符合团队既定的研发规范和质量标准。
- **避免元注释式的合规性声明**：在文档正文中，应避免使用"本方案满足/遵循/符合XX规范"、"根据XX.mdc规则"等直接指向内部规范名称或文件名的表述来解释或证明方案的合规性。规范的遵守应通过方案本身的合理性、内容的完备性和表达的专业性来体现，而非通过显式的"自我声明"。
- **通用化语言**：当需要提及标准、最佳实践或推荐做法时，应采用业界通用或团队普遍理解的词汇（如"标准化的接口设计"、"推荐的缓存策略"、"既定的安全基线"、"高质量编码实践"等），使文档更具普适性和专业性，便于不同背景的读者理解。

**流程图/状态图/时序图/类图等图示描述边界：**
- **图表标题规范**：图表标题应优先使用纯粹的业务语义描述（如："用户注册流程"、"订单状态变更"、"优化后代码结构示例"），或结合中性通用图表类型进行描述（如："流程图：用户注册"、"订单状态图"）。
- **禁止特指工具细节**：图表标题或其直接描述文字中，严禁出现具体指明 Mermaid 图表关键字/类型（例如 `stateDiagram-v2`, `activityDiagram`, `requirementDiagram`）或其特定风格/版本（例如"Mermaid Activity Diagram 风格"、"注释增强版"）的表述。
- **推荐通用类型**：若确实需要在标题中辅助说明图表的一般类型，应使用业界通用的中性术语，如"流程图"、"状态图"、"时序图"、"类图"、"架构图"等。
- **可选标注**：如图表确由特定工具（如 Mermaid）绘制且有必要注明，可在图示下方用简洁、非版本限定的文字进行标注（例如："注：本图采用 Mermaid 语法绘制。"或"注：此为某某场景的状态示意图。"）。此标注不应成为标题的一部分或干扰核心描述文字。

## 评审要点

- 方案是否覆盖全部需求与边界？
- 技术选型是否合理、对比充分？
- 架构与流程设计是否清晰、可落地？
- 风险识别与应对是否充分？
- 实施计划是否可执行、资源评估是否合理？
- 文档结构与内容是否符合本规范？

---

> 本规则为本项目专属技术方案设计文档规范，所有技术方案文档的编写与评审均应遵循本规范。如有特殊情况需补充说明并经评审组确认。
