---
description: 
globs: 
alwaysApply: true
---
# Java项目数据持久化规范

本规则基于阿里巴巴Java开发手册和现有项目规范，专注于数据库设计、SQL开发和ORM使用等方面的最佳实践。

## 一、表结构规范

### 【强制】基础字段
每个表必须包含以下基本字段：

| 字段名 | 字段含义 | 字段类型 | 默认值 | 备注 |
|--------|----------|----------|--------|------|
| id | 数据库自增主键 | bigint | 无 | 对于可以预见数量在千万级以下的，可以使用int，否则使用bigint |
| created_at | 记录创建时间 | datetime | NOW() | 创建后不允许修改 |
| created_by | 记录创建人 | char(32) | "" | 创建后不允许修改；长度可以根据业务做调整 |
| updated_at | 记录更新时间 | datetime | NOW() | 每次业务导致的修改，需要修改该字段 |
| updated_by | 记录更新操作人 | char(32) | "" | 每次业务导致的修改，需要修改该字段；长度可以根据业务做调整 |
| deleted | 逻辑删除 | tinyint(1) | 0 | 0: 未删除，1：已删除 |

示例建表语句：
```sql
CREATE TABLE `xxx` (
    `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
    `name` char(16) NOT NULL ,
    ## 业务字段
    `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `created_by` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '创建人',
    `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
    `updated_by` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '创建人',
    `deleted` tinyint(1) DEFAULT '0' COMMENT '删除状态 0-未删除 1-已删除',
    PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC;
```

### 【强制】索引命名规范

| 索引类型 | 命名规则 | 示例 |
|----------|----------|------|
| 普通索引 | idx_{索引字段} | 在im_group_id字段上加普通索引，索引名称为：idx_im_group_id |
| 唯一索引 | uk_{索引字段} | 在order_id字段上加唯一索引，索引名称为：uk_order_Id |
| 联合索引 | uni_{索引字段}_{索引字段}_{索引字段} | 在promote_time, start_time, deleted三个字段上添加联合索引，索引名称为uni_promote_time_start_time_deleted |

### 【强制】字段设计规范
1. 必须使用 UNSIGNED 存储非负数
2. 必须使用 TINYINT 存储布尔值（1是，0否）
3. 金额必须使用 DECIMAL，禁止使用 FLOAT 和 DOUBLE
4. 字符串长度不固定的用 VARCHAR，固定长度的用 CHAR
5. 字段必须有明确的业务含义
6. 必须指定字段的字符集和排序规则
7. **【推荐】** 除业务明确允许或用于特殊状态区分（如逻辑删除字段`deleted`），字段应尽可能声明为 `NOT NULL`。对必须提供默认值的字段，明确默认值的选择策略（例如，字符串是空字符串 `''`，数字是 `0`，或特定业务含义的值）。
8. **【推荐】** 枚举类型持久化时，推荐存储代表枚举业务含义的字符串代码（如 `"PAID"`, `"UNPAID"`）或稳定的数字代码，而不是直接使用枚举的序数 (`ordinal()`)，以避免因枚举成员顺序调整导致数据含义错乱。

### 【强制】索引设计规范
1. 每个表必须有主键，推荐使用 BIGINT 自增
2. 常用查询字段必须建立索引
3. 更新频繁的字段不建议建立索引
4. 索引个数不超过5个
5. 联合索引需要考虑最左前缀原则

## 二、MyBatis 使用规范

### 【强制】Mapper 接口规范
1. 必须在 dao 模块下
2. 接口名必须以 Mapper 结尾
3. 方法名要见名知意
4. 参数超过2个必须使用 @Param 注解

### 【强制】XML 文件规范
1. 必须在 resources/mapper 目录下
2. 路径必须与接口包路径一致
3. 必须指定 resultType 或 resultMap
4. 禁止使用 * 查询所有字段
5. 必须注明 SQL 的用途和作者

### 【强制】SQL 开发规范
1. 禁止使用存储过程
2. 禁止使用 SELECT *
3. 禁止使用 ORDER BY RAND()
4. 必须使用 #{} 预编译，禁止使用 ${}
5. 必须有注释说明 SQL 的用途
6. **【推荐】** 批量操作（如使用 MyBatis 的 `<foreach>`）时，应合理设置单批次数量，并注意不同数据库对SQL长度或参数数量的限制。

## 三、性能优化规范

### 【强制】查询优化
1. 必须有查询条件
2. 必须限制查询记录数
3. 禁止使用 SELECT COUNT(*)
4. 分页必须使用 LIMIT
5. 大数据量查询必须使用分页
6. **【推荐】** 警惕N+1查询问题。在MyBatis中，优先考虑使用关联查询（如`<join>`元素）、`<collection>`/`<association>`嵌套结果映射（一次查询获取所有相关数据），或在必要时合理配置并使用延迟加载策略。

### 【强制】更新优化
1. 必须带有 WHERE 条件
2. 禁止使用 UPDATE TABLE SET col=1
3. 必须使用乐观锁进行并发控制
4. 批量更新必须限制数量
5. 必须在事务中执行

### 【强制】连接池配置
1. 必须使用 Druid 连接池
2. 必须配置以下参数：
   ```yaml
   initialSize: 5
   minIdle: 5
   maxActive: 20
   maxWait: 60000
   timeBetweenEvictionRunsMillis: 60000
   minEvictableIdleTimeMillis: 300000
   validationQuery: SELECT 1
   testWhileIdle: true
   testOnBorrow: false
   testOnReturn: false
   poolPreparedStatements: true
   maxPoolPreparedStatementPerConnectionSize: 20
   filters: stat,wall,slf4j
   ```