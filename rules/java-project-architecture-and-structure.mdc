---
description: 
globs: 
alwaysApply: true
---
# Java项目架构与结构规范

本规范旨在统一Java项目的架构设计、模块划分、代码结构、分支管理和版本控制等方面，以提高项目的可维护性、可扩展性和团队协作效率。项目的结构设计旨在支持清晰的关注点分离，并为实施领域驱动设计（DDD）提供基础。

## 一、基础框架要求

### 【强制】技术栈版本
1. Java版本：1.8 (战略规划：考虑逐步迁移至新的LTS版本如Java 17，以利用新特性和性能改进)
2. Spring Boot：2.x (战略规划：随Java版本升级，考虑迁移至Spring Boot 3.x)
3. Dubbo：2.7.8
4. Nacos：2.0
5. Apollo：2.0.0
6. Redis + Jedis：3.3
7. MySQL：5.7+
8. Elasticsearch：7.16
9. MongoDB：最新稳定版
10. RocketMQ：最新稳定版
11. XXL-JOB：2.3.0
12. Maven：3.6.3
13. Resilience4j：最新稳定版
14. Log4j2：最新稳定版

### 【强制】项目特性
1. 所有项目必须是多模块项目
2. 必须使用 Spring Boot Starter 进行项目初始化
3. 必须使用 MyBatis-Plus 进行数据库操作
4. 必须使用 Log4j2 进行日志记录
5. 必须使用 Apollo 进行配置管理

## 二、项目结构规范

### 【强制】模块划分

项目应采用多模块Maven结构，以实现关注点分离和高内聚低耦合。以下模块是标准划分，旨在支持包括DDD在内的分层架构思想：

1. **`xxx-api` 模块**：定义对外提供的服务契约，主要是RPC接口及其相关的请求/响应对象（DTOs）和枚举。
   - 包含RPC服务接口 (例如 `UserRpcService`)
   - 包含RPC请求对象 (`XxxRpcReq`) 和响应对象 (`XxxRpcResp`)
   - 包含RPC层面的枚举定义 (如果这些枚举是API契约的一部分)
   - **此模块应尽量轻薄，不包含业务逻辑实现。**

2. **`xxx-api-impl` 模块**：RPC接口的实现层。在DDD语境下，此模块通常扮演应用服务（Application Service）的角色，负责编排领域逻辑，处理RPC请求。
   - 包含RPC服务接口的实现类 (例如 `UserRpcServiceImpl`)
   - 负责将RPC请求DTO转换为内部应用层或领域层所需的DTO/命令对象。
   - 调用 `biz` 模块中的应用服务或领域服务来执行核心业务。
   - 处理RPC层面的事务、安全、日志等横切关注点。
   - **不应包含核心领域规则，核心领域规则在 `biz` (或 `domain`) 模块中。**

3. **`xxx-biz` 模块**：核心业务逻辑层。此模块是DDD中领域模型（Domain Model）和应用服务（Application Services）的主要所在地。
   - **应用服务 (Application Services)**: 例如 `OrderAppService`，`UserAppService`。它们编排领域对象（实体、值对象、领域服务）来完成具体的业务用例。它们是 `api-impl` 或 `web` 模块的直接调用目标。
   - **领域模型 (Domain Model)**: 
     - **领域实体 (Entities)**: 例如 `Order`, `Product`。包含业务状态和行为（充血模型）。
     - **值对象 (Value Objects)**: 例如 `Address`, `Money`。
     - **领域服务 (Domain Services)**: 例如 `OrderPricingDomainService`。封装不属于任何特定实体的领域逻辑。
     - **仓库接口 (Repository Interfaces)**: 例如 `OrderRepository`。定义领域对象的持久化契约。
     - **领域事件 (Domain Events)**: 例如 `OrderPaidEvent`。
   - 业务相关的DTOs (Data Transfer Objects，用于应用服务内部或与领域层交互)。
   - 定时任务 (`job`)、消息处理 (`ons.consumer`, `ons.producer`) 等业务相关组件。

4. **`xxx-dao` 模块 (或 `xxx-infrastructure` 模块)**：数据访问层和基础设施实现。**此模块是DDD中的基础设施层（Infrastructure Layer）。**
   - **数据持久化对象 (DO - Data Objects)**: 例如 `UserDO`, `OrderDO`。与数据库表结构一一对应。
   - **MyBatis Mapper接口和XML映射文件**。
   - **仓库实现 (Repository Implementations)**: 例如 `OrderRepositoryImpl`。实现定义在 `biz` (或 `domain`) 模块中的仓库接口，负责DO与领域实体之间的转换和实际的数据库操作。
   - 基础设施相关的其他实现，如消息队列的生产者/消费者具体实现（如果不想放在biz），缓存服务的具体实现等。

5. **`xxx-web` 模块**：处理HTTP请求的Web层，对外暴露HTTP API。
   - 包含Controller类，处理HTTP请求，调用 `biz` 模块中的应用服务。
   - 包含Web层请求对象 (`XxxReq`) 和响应对象 (`XxxResp`)，以及必要的DTO转换。
   - 包含Spring MVC拦截器 (`interceptor`)、Web相关配置 (`config`)。

6. **`xxx-common` 模块**：项目内通用的组件和工具类。
   - 通用工具类 (`utils`)。
   - 应用范围的常量定义 (`constants`)。
   - 应用范围的、非领域特定的枚举定义 (`enums`)。
   - 通用异常基类 (`exception`) (若 `com.hexonal.ht.common` 无法满足)。
   - 通用配置类 (如果适用)。

7. **`xxx-integration` 模块**：用于集成外部第三方服务或系统。
   - 包含调用外部HTTP API、RPC服务或其他第三方SDK的客户端代码。
   - 在DDD中，这部分常作为防腐层（Anti-Corruption Layer, ACL）的一部分，将外部模型的变动与核心领域隔离开。
   - 接口通常定义在 `biz` (应用层或领域层)，实现放在此模块。

*(【DDD增强】对于大型复杂项目，可以考虑将核心领域模型 (`Entities`, `Value Objects`, `Domain Service interfaces`, `Repository interfaces`, `Domain Events`) 提取到独立的 `xxx-domain` 模块，使其不依赖任何基础设施或应用层代码，实现更纯粹的领域隔离。此时，`xxx-biz` 模块将主要包含应用服务和领域服务的实现。)*

### 【强制】包结构规范
1. 基础包名前缀：com.hexonal (或 com.yp)
2. 模块包名 (以项目代码为 `myproject`，业务模块为 `order` 为例):
   ```
   com.hexonal.myproject.api          // API定义 (RPC)
     ├── rpc.order.service      // RPC服务接口 (e.g., com.hexonal.myproject.api.rpc.order.service.OrderRpcService)
     ├── rpc.order.request      // RPC请求对象
     └── rpc.order.response     // RPC响应对象
     └── rpc.order.enums        // RPC API相关的枚举
   
   com.hexonal.myproject.api.impl     // API实现 (RPC)
     └── rpc.order.service.impl // RPC服务实现 (e.g., com.hexonal.myproject.api.impl.rpc.order.service.impl.OrderRpcServiceImpl)
   
   com.hexonal.myproject.biz          // 业务逻辑核心
     ├── app.order.service      // 应用服务接口 (e.g., com.hexonal.myproject.biz.app.order.service.OrderAppService)
     ├── app.order.service.impl // 应用服务实现
     ├── app.order.dto          // 应用服务使用的数据传输对象 (请求/响应)
     ├── domain.order.model     // 领域模型: Entities, Value Objects, Domain Events (e.g., com.hexonal.myproject.biz.domain.order.model.Order)
     ├── domain.order.service   // 领域服务接口与实现 (e.g., com.hexonal.myproject.biz.domain.order.service.OrderPricingDomainService)
     ├── domain.order.repository// 仓库接口 (e.g., com.hexonal.myproject.biz.domain.order.repository.OrderRepository)
     ├── job.order            // 定时任务
     ├── mq.order.consumer    // 消息消费者
     ├── mq.order.producer    // 消息生产者
     └── // ... 其他业务组件 (如 specific utils for this biz module)
   
   com.hexonal.myproject.dao          // 数据访问与基础设施 (或者叫 .infrastructure)
     ├── persistent.order.po        // 持久化对象 (DO/PO) (e.g., com.hexonal.myproject.dao.persistent.order.po.OrderPO)
     ├── persistent.order.mapper    // MyBatis Mapper接口
     ├── repository.order.impl  // 仓库实现 (e.g., com.hexonal.myproject.dao.repository.order.impl.OrderRepositoryImpl)
     └── // ... 其他基础设施实现 (如缓存客户端封装)

   // 若使用独立的 xxx-domain 模块 (此处 xxx 即 myproject):
   // com.hexonal.myproject.domain       // 纯领域模型模块
   //   └── order.model
   //   └── order.service (接口)
   //   └── order.repository (接口)
   //   └── order.event

   com.hexonal.myproject.integration  // 外部集成
     ├── acl.order.{外部系统}.adapter // 防腐层适配器
     ├── acl.order.{外部系统}.dto     // 外部系统DTO
     └── client.order.{外部系统}    // 外部服务客户端
   
   com.hexonal.myproject.common       // 项目级公共组件 (区别于集团级common)
     ├── constants          
     ├── enums             // 非领域相关的通用枚举
     ├── util              // 通用工具类 (注意避免成为垃圾桶)
     └── exception         // 项目级通用异常
   
   com.hexonal.myproject.web          // Web层 (HTTP API)
     ├── rest.order.controller  // REST Controller (e.g., com.hexonal.myproject.web.rest.order.controller.OrderController)
     ├── rest.order.request     // Web请求对象
     ├── rest.order.response    // Web响应对象 (通常是 Result<SpecificResp>)
     ├── interceptor       
     └── config            
   
   // 启动类 Application.java 通常放在顶层基础包下，例如 com.hexonal.myproject
   ```
   *注：`com.hexonal` (或 `com.hexonal`) 为公司/集团顶级包名。示例中的 `myproject` 代表项目的核心标识，通常对应于父POM中 `groupId` 的最后一部分（例如，若父POM `groupId` 为 `com.hexonal.oms`，则 `myproject` 在包结构中对应 `oms`）。此项目核心标识应根据实际项目定名（如 `oms`, `ums`, `ht` 等）。示例中的 `order` 代表具体的业务模块，应替换为实际的模块名（如 `user`, `product` 等）。*

### 【强制】资源文件规范
1. 配置文件位置：
   ```
   resources/
     ├── application.yml        // 主配置文件
     ├── application-dev.yml    // 开发环境配置
     ├── application-test.yml   // 测试环境配置
     ├── application-prod.yml   // 生产环境配置
     └── logback-spring.xml    // 日志配置
   ```
2. MyBatis映射文件位置：
   ```
   resources/
     └── mapper/
         └── 业务模块名/
             └── XxxMapper.xml
   ```

## 三、分支管理与版本控制规范

### 【强制】分支命名规范
1. 主分支：master
2. 开发分支：develop
3. 功能分支：feature/模块名/功能描述
4. 修复分支：hotfix/问题描述
5. 发布分支：release/版本号

### 【强制】分支策略
1. master分支：
   - 生产环境代码
   - 只能从release分支合并
   - 每次合并必须打tag
2. develop分支：
   - 开发环境代码
   - 功能开发的基础分支
   - 只能从feature分支合并
3. feature分支：
   - 从develop分支创建
   - 完成后合并回develop
   - 命名规范：feature/模块名/功能描述
4. hotfix分支：
   - 从master分支创建
   - 完成后同时合并到master和develop
   - 命名规范：hotfix/问题描述
5. release分支：
   - 从develop分支创建
   - 完成后合并到master和develop
   - 命名规范：release/版本号

### 【强制】版本号格式
1. 格式：主版本号.次版本号.修订号
2. 主版本号：不兼容的API修改
3. 次版本号：向下兼容的功能性新增
4. 修订号：向下兼容的问题修正

### 【强制】版本发布流程
1. 准备阶段：
   - 创建release分支
   - 更新版本号
   - 更新CHANGELOG
2. 测试阶段：
   - 完整回归测试
   - 修复发现的问题
   - 更新文档 (包括API文档、用户手册、CHANGELOG等)
3. 发布阶段：
   - 合并到master
   - 打tag
   - 部署生产环境
4. 完成阶段：
   - 合并到develop
   - 删除release分支
   - 发布公告

### 【强制】Tag管理
1. 命名规范：
   - v主版本号.次版本号.修订号
   - 示例：v1.2.3
2. 标记要求：
   - 必须有描述信息
   - 必须关联提交ID
   - 必须有发布说明
3. 管理要求：
   - 禁止删除已发布tag
   - 禁止修改已发布tag
   - 及时同步到远程仓库

### 【强制】依赖管理规范
1. 版本管理
   - 统一在父POM中定义版本 (在 `<dependencyManagement>` 和 `<pluginManagement>` 中)
   - 禁止在子模块中直接指定版本 (应继承父POM定义的版本)
   - 必须使用版本管理插件 (例如 `versions-maven-plugin` 辅助版本更新检查，`maven-enforcer-plugin` 检查依赖收敛和规范)
   - 定期更新依赖版本 (关注安全漏洞和重要修复)
2. 依赖原则
   - 避免依赖冲突
   - 避免循环依赖
   - 避免过度依赖
   - 及时清理无用依赖
   - **【推荐】**使用 `mvn dependency:tree` 和 IDE 工具分析并优化依赖树，确保依赖的简洁和无冲突。