---
description: 
globs: 
alwaysApply: true
---
# MCP 服务器指南 (MCP Server Guidelines)

本指南为开发 MCP (Model Context Protocol) 服务器应用程序（如 `coze-mcp-server`）提供详细的规范和最佳实践。MCP 服务器的核心职责是向 MCP 客户端（以及通过客户端操作的 LLM）安全有效地暴露数据（资源）和功能（工具）。

参考：
*   [MCP 核心架构指南](mdc:rules/mcp-architecture-general.mdc)
*   [MCP 资源指南](mdc:rules/mcp-resources.mdc) (用于资源定义的详细规范)
*   [MCP 工具指南](mdc:rules/mcp-tools.mdc) (用于工具定义的详细规范)
*   [MCP 高级概念指南](mdc:rules/mcp-advanced-concepts.mdc)
*   [Model Context Protocol Python SDK](mdc:https:/github.com/modelcontextprotocol/python-sdk)
*   `coze-mcp-server` 项目 ([GitHub](mdc:https:/github.com/coze-dev/coze-mcp-server)) (作为一个实现了这些原则的示例项目)

## 1. 服务器核心职责

根据 [MCP 核心架构指南](mdc:rules/mcp-architecture-general.mdc) 的定义，MCP 服务器的关键职责包括：

*   **实现 MCP 协议**: 严格遵守 MCP 规范，处理来自客户端的请求并发送正确的响应和通知。
*   **暴露能力**: 主要通过以下方式：
    *   **资源**: 定义、管理并通过 MCP 协议方法（如 `listResources`, `retrieveResource`, `subscribeToResource`）暴露数据和内容。详细定义和实现指南参见 [MCP 资源指南](mdc:rules/mcp-resources.mdc)。
    *   **工具**: 定义、实现并通过 MCP 协议方法（如 `listTools`, `executeTool`）暴露具体操作。详细定义和实现指南参见 [MCP 工具指南](mdc:rules/mcp-tools.mdc)。
    *   **提示 (Prompts)**: (如果适用) 定义并暴露可重用的提示模板。参见 [MCP 高级概念指南](mdc:rules/mcp-advanced-concepts.mdc)。
*   **连接管理**: 监听来自客户端的连接请求，并管理活动的客户端会话。
*   **安全性**: 确保对数据和功能的访问是安全的，实施必要的认证和授权机制。
*   **配置**: 提供清晰的配置选项。特定项目的 `[README.md](mdc:README.md)` (例如 `coze-mcp-server` 的 README) 可以作为如何记录这些配置的良好示例。

## 2. 实现资源和工具的最佳实践

服务器在实现其核心功能（即提供资源和工具）时，应遵循各自的详细指南：

*   **资源实现**: 请严格遵循 [MCP 资源指南](mdc:rules/mcp-resources.mdc) 中的规范和最佳实践。
*   **工具实现**: 请严格遵循 [MCP 工具指南](mdc:rules/mcp-tools.mdc) 中的规范和最佳实践。

确保这些实现与 MCP 协议规范完全兼容，并且易于客户端发现和使用。

## 3. 服务器端开发最佳实践

*   **使用 MCP SDK**: 强烈推荐使用官方的 MCP SDK（例如 [modelcontextprotocol/python-sdk](mdc:https:/github.com/modelcontextprotocol/python-sdk)）。SDK 能够处理大部分协议的复杂性。
    *   可以参考 `coze-mcp-server` 项目，它是一个基于 Python SDK 实现 MCP 服务器的良好示例。
*   **模块化设计**: 将服务器逻辑划分为清晰的模块。模块化设计应遵循 [项目结构指南](mdc:rules/project-structure.mdc) 中关于包架构的建议。
*   **异步处理**: 使用异步编程模型（如 Python 的 `asyncio`）来高效处理并发请求。
*   **错误处理与日志记录**:
    *   实现全面的错误处理机制，向客户端返回符合 MCP 规范的错误响应。
    *   进行充分的日志记录，便于调试和监控。
*   **可测试性**: 编写单元测试和集成测试。
*   **性能与可伸缩性**: 根据预期的负载考虑服务器的性能。
*   **文档**: 为服务器提供的能力、配置选项和部署说明编写清晰的文档 (例如，项目的 `[README.md](mdc:README.md)`)。
*   **版本控制与依赖管理**: 参考 [使用 uv 打包与依赖管理指南](mdc:rules/packaging-with-uv.mdc) 和 [Python 编码标准指南](mdc:rules/python-coding-standards.mdc)。

## 4. 安全注意事项

*   **输入验证**: 严格验证来自客户端的所有输入。
*   **权限控制**: 实现适当的访问控制机制。
*   **资源限制**: 防止客户端滥用资源。
*   **依赖安全**: 定期扫描和更新第三方依赖。

遵循这些指南将有助于构建健壮、安全且符合 MCP 规范的服务器应用程序。